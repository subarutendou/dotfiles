#+title Emacs settings
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

* pre-load
** Minimum
#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
  (setq custom-file "~/.emacs.d/.emacs.custom.el")
  (add-to-list 'load-path "~/.emacs.d/.emacs.local/")

  (setq inhibit-startup-message t
    inhibit-startup-echo-area-message t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (set-fringe-mode 10)
  (setq visible-bell t)
  (setq use-dialog-box nil)
  (setq initial-scratch-message nil)
  (save-place-mode 1)
  (show-paren-mode 1)
  (setq-default x-select-enable-primary t)
  (setq-default frame-resize-pixelwise t)
  (add-hook 'emacs-startup-hook 'toggle-frame-maximized)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (setq native-comp-async-report-warnings-errors nil)
  (column-number-mode 1)
  (global-auto-revert-mode 1)
  (add-hook 'dired-mode-hook 'auto-revert-mode)
  (when (version<= "26.0.50" emacs-version )
    (global-display-line-numbers-mode))
  (setq display-line-numbers-type 'relative)
  (defvar file-name-handler-alist-old file-name-handler-alist)
  (setq file-name-handler-alist nil
    gc-cons-threshold most-positive-fixnum)
  (add-hook 'after-init-hook
        (lambda ()
          (setq file-name-handler-alist file-name-handler-alist-old)
          (setq gc-cons-threashold (* 2 1000 1000)))
        t)
  (dolist (mode ' (org-mode-hook
           term-mode-hook
           shell-mode-hook
           eshell-mode-hook
           vterm-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
  (setq browse-url-browser-function 'browse-url-default-windows-browser)
  (when (fboundp 'electric-pair-mode)
    (electric-pair-mode t))
  (add-to-list 'default-frame-alist '(font . "Victor Mono-14"))
  (setq browse-url-browser-function 'browse-url-default-browser)
  (setq vc-make-backup-files t)
  (setq
   backup-by-copying t
   backup-directory-alist
   '(("." . ".saves"))
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)
#+end_src

* basic
** use-package
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** package
*** melpa emacs
#+begin_src emacs-lisp
  (use-package ido
    :config
    (ido-mode 1)
    (setq ido-everywhere t))

  (use-package ido-completing-read+
    :config
    (ido-ubiquitous-mode 1))

  (use-package amx
    :config
    (amx-mode)
    ;; This is your old M-x.
    (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command))

  (use-package diminish)
  (use-package flx)
  (use-package swift-mode)
  (use-package lua-mode)
  (use-package python-mode)
  (use-package rust-mode)
  (use-package json-mode)
  (use-package yaml-mode)
  (use-package auto-complete
               :diminish auto-complete-mode
               :config
               (ac-config-default))

  (use-package elfeed
      :custom
      (elfeed-db-directory
       (expand-file-name "elfeed" user-emacs-directory))
       (elfeed-show-entry-switch 'display-buffer)
      :bind
      ("C-c w e" . elfeed))

  (require 'elfeed-org)
  (elfeed-org)

  (use-package magit)

  (require 'simpc-mode)
  (add-to-list 'auto-mode-alist '("\\.[hc]\\(pp\\)?\\'" . simpc-mode))

  (require 'c3-mode)
  (use-package rainbow-delimiters
               :hook (prog-mode . rainbow-delimiters-mode))

  (use-package which-key
    :config
    (which-key-mode)
    (which-key-setup-minibuffer))

  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src

** settings
#+begin_src emacs-lisp
  (blink-cursor-mode 0)
  (require 'recentf)
  (recentf-mode t)
  (setq recentf-max-saved-items 50)
  (setq-default indent-tabs-mode nil)
  (setq-default c-basic-offset 4)

  (use-package savehist
      :config
      (setq history-length 25)
      (savehist-mode 1)
      (setq savehist-save-minibuffer-history t)
      (add-hook 'after-init-hook #'savehist-mode))

  (load-file custom-file)
#+end_src

** package_configs
*** elfeed-org
#+begin_src org :tangle ~/.emacs.d/elfeed.org
  ,* Imported Feeds                                                     :elfeed:
  ,** live                                                                :live:
  ,*** [[https://www.youtube.com/feeds/videos.xml?channel_id=UCIfAvpeIWGHb0duCkMkmm2Q][Nimi Nightmare]]
  ,*** [[https://www.youtube.com/feeds/videos.xml?channel_id=UCSE_JyJeiJQvg3RCnSD272Q][SmugAlana]]
  ,*** [[https://www.youtube.com/feeds/videos.xml?channel_id=UC3K7pmiHsNSx1y0tdx2bbCw][Tenma Ch. マエミ 天満 【Phase Connect】]]
  ,*** [[https://www.youtube.com/feeds/videos.xml?channel_id=UCjXJYPsKxoJyc-1RPB6dSyw][Uruka Ch. 藤倉ウルカ 【Phase Connect】]]
  ,*** [[https://www.youtube.com/feeds/videos.xml?channel_id=UCJ46YTYBQVXsfsp8-HryoUA][Pipkin Pippa Ch.【Phase Connect】]]
  ,** video                                                              :video:
  ,*** [[https://www.youtube.com/feeds/videos.xml?channel_id=UCJ46YTYBQVXsfsp8-HryoUA][Pipkin Pippa Ch.【Phase Connect】]]
  ,*** [[https://www.youtube.com/feeds/videos.xml?channel_id=UC7j2nATL5qX-CfzdFvNfPtA][juzcook]]
  ,*** [[https://www.youtube.com/feeds/videos.xml?channel_id=UCQtEIMnABKkglAlrASZ4p9w][Leaflit & Asari]]
  ,*** [[
  ][sorted food]]
  ,** blog                                                                :blog:
  ,*** [[http://xahlee.info/emacs/emacs/blog.xml][Xah Emacs Blog]]
  ,*** [[https://ziglang.org/news/index.xml][zig]]
  ,** forum                                                              :forum:
  ,*** [[https://users.rust-lang.org/latest.rss][rust lastest]]
#+end_src
* emacs.local
** elfeed-org
#+begin_src emacs-lisp :tangle ~/.emacs.d/.emacs.local/elfeed-org.el
  ;;; elfeed-org.el --- Configure elfeed with one or more org-mode files -*- lexical-binding: t; -*-

  ;; Copyright (C) 2014  Remy Honig

  ;; Author           : Remy Honig <remyhonig@gmail.com>
  ;; Package-Requires : ((emacs "28.1") (elfeed "1.1.1") (org "8.2.7"))
  ;; URL              : https://github.com/remyhonig/elfeed-org
  ;; Version          : 20250104.0
  ;; Keywords         : news

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

  ;;; Commentary:
  ;; Maintaining tags for all rss feeds is cumbersome using the regular
  ;; flat list where there is no hierarchy and tag names are duplicated
  ;; a lot.  Org-mode makes the book keeping of tags and feeds much
  ;; easier.  Tags get inherited from parent headlines.  Multiple files
  ;; can be specified to separate your private from your work feeds for
  ;; example.  You may also use tagging rules to tag feeds by entry-title
  ;; keywords.  See https://github.com/remyhonig/elfeed-org for usage.

  ;;; Code:

  (require 'elfeed)
  (require 'org)
  (require 'org-element)
  (require 'cl-lib)
  (require 'xml)


  (defgroup elfeed-org nil
    "Configure the Elfeed RSS reader with an Orgmode file"
    :group 'comm)


  (defcustom rmh-elfeed-org-tree-id "elfeed"
    "The tag or ID property on the trees containing the RSS feeds."
    :group 'elfeed-org
    :type 'string)

  (defcustom rmh-elfeed-org-ignore-tag "ignore"
    "The tag on the feed trees that will be ignored."
    :group 'elfeed-org
    :type 'string)

  (defcustom rmh-elfeed-org-auto-ignore-invalid-feeds nil
    "Tag feeds to ignore them when a feed could not loaded."
    :group 'elfeed-org
    :type 'bool)

  (defcustom rmh-elfeed-org-files (list (locate-user-emacs-file "elfeed.org"))
    "The files where we look to find trees with the `rmh-elfeed-org-tree-id'.
  In this file paths can be given relative to `org-directory'."
    :group 'elfeed-org
    :type '(repeat (file :tag "org-mode file")))

  (defvar elfeed-org-new-entry-hook nil
    "List of new-entry tagger hooks created by elfeed-org.")

  (defun rmh-elfeed-org-check-configuration-file (file)
    "Make sure FILE exists."
    (when (not (file-exists-p (expand-file-name file org-directory)))
      (error "Elfeed-org cannot open %s.  Make sure it exists or customize the variable \'rmh-elfeed-org-files\'"
             (abbreviate-file-name file))))

  (defun rmh-elfeed-org-is-headline-contained-in-elfeed-tree ()
    "Is any ancestor a headline with the elfeed tree id.
  Return t if it does or nil if it does not."
    (let ((result nil))
      (save-excursion
        (while (and (not result) (org-up-heading-safe))
          (setq result (member rmh-elfeed-org-tree-id (org-get-tags))))
      result)))

  (defun rmh-elfeed-org-mark-feed-ignore (url)
    "Set tag `rmh-elfeed-org-ignore-tag' to headlines containing the feed URL."
    (let ((org-inhibit-startup t))
      (dolist (org-file rmh-elfeed-org-files)
        (with-current-buffer (find-file-noselect
                              (expand-file-name org-file))
          (org-mode)
          (goto-char (point-min))
          (while (and
                  (search-forward url nil t)
                  ;; Prefer outline-on-heading-p because org-on-heading-p
                  ;; is obsolete but org-at-heading-p was only introduced
                  ;; in org 9.0:
                  (outline-on-heading-p t)
                  (rmh-elfeed-org-is-headline-contained-in-elfeed-tree))
            (org-toggle-tag rmh-elfeed-org-ignore-tag 'on))
          (elfeed-log 'info "elfeed-org tagged '%s' in file '%s' with '%s' to be ignored" url org-file rmh-elfeed-org-ignore-tag)))))

  (defun rmh-elfeed-org-import-trees (tree-id)
    "Get trees with \":ID:\" property or tag of value TREE-ID.
  Return trees with TREE-ID as the value of the id property or
  with a tag of the same value.  Setting an \":ID:\" property is not
  recommended but I support it for backward compatibility of
  current users."
    (org-element-map
        (org-element-parse-buffer)
        'headline
      (lambda (h)
        (when (or (member tree-id (org-element-property :tags h))
                  (equal tree-id (org-element-property :ID h))) h))))


  (defun rmh-elfeed-org-convert-tree-to-headlines (parsed-org)
    "Get the inherited tags from PARSED-ORG structure if MATCH-FUNC is t.
  The algorithm to gather inherited tags depends on the tree being
  visited depth first by `org-element-map'.  The reason I don't use
  `org-get-tags-at' for this is that I can reuse the parsed org
  structure and I am not dependent on the setting of
  `org-use-tag-inheritance' or an org buffer being present at
  all.  Which in my opinion makes the process more traceable."
    (let* ((tags '())
           (level 1))
      (org-element-map parsed-org 'headline
        (lambda (h)
          (pcase-let*
              ((current-level (org-element-property :level h))
               (delta-level (- current-level level))
               (delta-tags (mapcar (lambda (tag)
                                     (intern (substring-no-properties tag)))
                                   (org-element-property :tags h)))
               (heading (org-element-property :raw-value h))
               (`(,link ,description)
                (org-element-map (org-element-property :title h) 'link
                  (lambda (link)
                    (list
                     (org-element-property :raw-link link)
                     (when (and (org-element-property :contents-begin link)
                                (org-element-property :contents-end link))
                       (buffer-substring
                        (org-element-property :contents-begin link)
                        (org-element-property :contents-end link)))))
                  nil t)))
            ;; update the tags stack when we visit a parent or sibling
            (unless (> delta-level 0)
              (let ((drop-num (+ 1 (- delta-level))))
                (setq tags (nthcdr drop-num tags))))
            ;; save current level to compare with next heading that will be visited
            (setq level current-level)
            ;; save the tags that might apply to potential children of the current heading
            (push (append (car tags) delta-tags) tags)
            ;; return the heading and inherited tags
            (if (and link description)
                (append (list link)
                         (car tags)
                         (list description))
              (append (list (if link link heading))
                       (car tags))))))))

  ;; TODO: mark wrongly formatted feeds (PoC for unretrievable feeds)
  (defun rmh-elfeed-org-flag-headlines (parsed-org)
    "Flag headlines in PARSED-ORG if they don't have a valid value."
    (org-element-map parsed-org 'headline
      (lambda (h)
        (let ((tags (org-element-property :tags h)))
          (org-element-put-property h :tags (push "_flag_" tags))))))


  (defun rmh-elfeed-org-filter-relevant (list)
    "Filter relevant entries from the LIST."
    (cl-remove-if-not
     (lambda (entry)
       (and
        (string-match-p "\\(http\\|gopher\\|file\\|entry-title\\)" (car entry))
        (not (member (intern rmh-elfeed-org-ignore-tag) entry))))
     list))


  (defun rmh-elfeed-org-cleanup-headlines (headlines tree-id)
    "In all HEADLINES given remove the TREE-ID."
    (mapcar (lambda (e) (delete tree-id e)) headlines))


  (defun rmh-elfeed-org-import-headlines-from-files (files tree-id)
    "Visit all FILES and return the headlines stored under tree tagged TREE-ID or with the \":ID:\" TREE-ID in one list."
    (cl-remove-duplicates
     (mapcan (lambda (file)
               (with-temp-buffer
                 (insert-file-contents (expand-file-name file org-directory))
                 (let ((org-inhibit-startup t)
                       (org-mode-hook nil))
                   (org-mode))
                 (rmh-elfeed-org-cleanup-headlines
                  (rmh-elfeed-org-filter-relevant
                   (rmh-elfeed-org-convert-tree-to-headlines
                    (rmh-elfeed-org-import-trees tree-id)))
                  (intern tree-id))))
             files)
     :test #'equal))


  (defun rmh-elfeed-org-convert-headline-to-tagger-params (tagger-headline)
    "Add new entry hooks for tagging configured with the found headline in TAGGER-HEADLINE."
    (list
     (string-clean-whitespace
      (string-remove-prefix "entry-title:" (car tagger-headline)))
     (cdr tagger-headline)))


  (defun rmh-elfeed-org-export-entry-hook (tagger-params)
    "Export TAGGER-PARAMS to the proper `elfeed' structure."
    (add-hook 'elfeed-org-new-entry-hook
              (elfeed-make-tagger
               :entry-title (nth 0 tagger-params)
               :add (nth 1 tagger-params))))

  (defun rmh-elfeed-org-export-feed (headline)
    "Export HEADLINE to the proper `elfeed' structure."
    (if (and (stringp (car (last headline)))
             (> (length headline) 1))
        (progn
          (add-to-list 'elfeed-feeds (butlast headline))
          (let ((feed (elfeed-db-get-feed (car headline)))
                (title (substring-no-properties (car (last headline)))))
            (setf (elfeed-meta feed :title) title)
            (elfeed-meta feed :title)))
      (add-to-list 'elfeed-feeds headline)))

  (defun rmh-elfeed-org-process (files tree-id)
    "Process headlines and taggers from FILES with org headlines with TREE-ID."

    ;; Warn if configuration files are missing
    (mapc #'rmh-elfeed-org-check-configuration-file files)

    ;; Clear elfeed structures
    (setq elfeed-feeds nil)
    (setq elfeed-org-new-entry-hook nil)

    ;; Convert org structure to elfeed structure and register taggers and subscriptions
    (let* ((headlines (rmh-elfeed-org-import-headlines-from-files files tree-id))
           (subscriptions (rmh-elfeed-org-filter-subscriptions headlines))
           (taggers (rmh-elfeed-org-filter-taggers headlines))
           (elfeed-taggers (mapcar #'rmh-elfeed-org-convert-headline-to-tagger-params taggers)))
      (mapc #'rmh-elfeed-org-export-feed subscriptions)
      (mapc #'rmh-elfeed-org-export-entry-hook elfeed-taggers))

    ;; Tell user what we did
    (elfeed-log 'info "elfeed-org loaded %i feeds, %i rules"
             (length elfeed-feeds)
             (length elfeed-org-new-entry-hook)))

  (defun elfeed-org-run-new-entry-hook (entry)
    "Run ENTRY through elfeed-org taggers."
    (dolist (hook elfeed-org-new-entry-hook)
      (funcall hook entry)))

  (defun rmh-elfeed-apply-autotags-now-advice ()
    "Make entry title matching rules works with `elfeed-apply-autotags-now'."
    (interactive)
    (let* ((headlines (rmh-elfeed-org-import-headlines-from-files
                       rmh-elfeed-org-files rmh-elfeed-org-tree-id))
           (taggers (rmh-elfeed-org-filter-taggers headlines))
           (elfeed-taggers (mapcar #'rmh-elfeed-org-convert-headline-to-tagger-params taggers))
           (entry-match-taggers (mapcar (lambda (tagger-params)
                                          (elfeed-make-tagger
                                           :entry-title (nth 0 tagger-params)
                                           :add (nth 1 tagger-params)))
                                        elfeed-taggers)))
      (with-elfeed-db-visit (entry feed)
                            (dolist (tagger entry-match-taggers)
                              (funcall tagger entry)))))

  (defun rmh-elfeed-org-filter-taggers (headlines)
    "Filter tagging rules from the HEADLINES in the tree."
    (cl-remove-if-not (lambda (headline) (string-prefix-p "entry-title" (car headline)))
                      headlines))

  (defun rmh-elfeed-org-filter-subscriptions (headlines)
    "Filter subscriptions to rss feeds from the HEADLINES in the tree."
    (cl-remove-if (lambda (headline) (string-prefix-p "entry-title" (car headline)))
                  headlines))

  (defun rmh-elfeed-org-convert-opml-to-org (xml level)
    "Convert OPML content to Org format.
  Argument XML content of the OPML file.
  Argument LEVEL current level in the tree."
    (cl-loop for (tag attr . content) in (cl-remove-if-not #'listp xml)
             when (and (not (assoc 'xmlUrl attr)) (assoc 'title attr))
             concat (format "%s %s\n" (make-string level ?*) (cdr it))
             when (assoc 'xmlUrl attr)
             concat (format "%s [[%s][%s]]\n" (make-string level ?*)
                            (cdr it) (cdr (assoc 'title attr)))
             concat (rmh-elfeed-org-convert-opml-to-org content (+ 1 level))))

  (defun elfeed-org-import-opml (opml-file)
    "Import feeds from OPML file to a temporary Org buffer.
  Argument OPML-FILE filename of the OPML file."
    (interactive "FInput OPML file: ")
    (let* ((xml (xml-parse-file opml-file))
           (content (rmh-elfeed-org-convert-opml-to-org xml 0)))
      (with-current-buffer (get-buffer-create "*Imported Org Feeds*")
        (erase-buffer)
        (insert (format "* Imported Feeds            :%s:\n" rmh-elfeed-org-tree-id))
        (insert content)
        (let ((org-inhibit-startup t))
          (org-mode))
        (pop-to-buffer (current-buffer)))))


  (defun rmh-elfeed-org-convert-org-to-opml (org-buffer)
    "Convert Org buffer content to OPML format.
  Argument ORG-BUFFER the buffer to write the OPML content to."
    (let (need-ends
          opml-body)
      (with-current-buffer org-buffer
        (let ((org-inhibit-startup t)
              (org-mode-hook nil))
          (org-mode))
        (org-element-map (rmh-elfeed-org-import-trees
                          rmh-elfeed-org-tree-id)
            'headline
          (lambda (h)
            (let* ((current-level (org-element-property :level h))
                   (tags (org-element-property :tags h))
                   (heading (org-element-property :raw-value h))
                   (link-and-title (and (string-match "^\\[\\[\\(http.+?\\)\\]\\[\\(.+?\\)\\]\\]" heading)
                                        (list (match-string-no-properties 0 heading)
                                              (match-string-no-properties 1 heading)
                                              (match-string-no-properties 2 heading))))
                   (hyperlink (and (string-match "^\\[\\[\\(http.+?\\)\\]\\(?:\\[.+?\\]\\)?\\]" heading)
                                   (list (match-string-no-properties 0 heading)
                                         (match-string-no-properties 1 heading))))
                   url
                   title
                   opml-outline)
              ;; fill missing end outlines
              (while (and (car need-ends) (>= (car need-ends) current-level))
                (let* ((level (pop need-ends)))
                  (setq opml-body (concat opml-body (format "  %s</outline>\n"
                                                            (make-string (* 2 level) ? ))))))

              (cond ((string-prefix-p "http" heading)
                     (setq url heading)
                     (setq title (or (elfeed-feed-title (elfeed-db-get-feed heading)) "Unknown")))
                    (link-and-title (setq url (nth 1 link-and-title))
                                    (setq title (nth 2 link-and-title)))
                    (hyperlink (setq url (nth 1 hyperlink))
                               (setq title (or (elfeed-feed-title (elfeed-db-get-feed (nth 1 hyperlink))) "Unknown")))
                    (t (setq title heading)))
              (if url
                  (setq opml-outline (format "  %s<outline title=\"%s\" xmlUrl=\"%s\"/>\n"
                                             (make-string (* 2 current-level) ? )
                                             (xml-escape-string title)
                                             (xml-escape-string url)))
                (unless (string-prefix-p "entry-title" heading)
                  (unless (member rmh-elfeed-org-tree-id tags)
                    ;; insert category title only when it is neither the top
                    ;; level elfeed node nor the entry-title node
                    (progn
                      (push current-level need-ends)
                      (setq opml-outline (format "  %s<outline title=\"%s\">\n"
                                                 (make-string (* 2 current-level) ? )
                                                 (xml-escape-string title)))))))
              (setq opml-body (concat opml-body opml-outline))))))

      ;; fill missing end outlines at end
      (while (car need-ends)
        (let* ((level (pop need-ends)))
          (setq opml-body (concat opml-body (format "  %s</outline>\n"
                                                    (make-string (* 2 level) ? ))))))
      opml-body))

  (defun elfeed-org-export-opml ()
    "Export Org feeds under `rmh-elfeed-org-files' to a temporary OPML buffer.
  The first level elfeed node will be ignored. The user may need edit the output
  because most of Feed/RSS readers only support trees of 2 levels deep."
    (interactive)
    (let ((opml-body (cl-loop for org-file in rmh-elfeed-org-files
                               concat
                               (with-temp-buffer
                                 (insert-file-contents
                                  (expand-file-name org-file org-directory))
                                 (rmh-elfeed-org-convert-org-to-opml
                                  (current-buffer))))))
      (with-current-buffer (get-buffer-create "*Exported OPML Feeds*")
        (erase-buffer)
        (insert "<?xml version=\"1.0\"?>\n")
        (insert "<opml version=\"1.0\">\n")
        (insert "  <head>\n")
        (insert "    <title>Elfeed-Org Export</title>\n")
        (insert "  </head>\n")
        (insert "  <body>\n")
        (insert opml-body)
        (insert "  </body>\n")
        (insert "</opml>\n")
        (xml-mode)
        (pop-to-buffer (current-buffer)))))

  (defun rmh-elfeed-org-process-advice ()
    "Advice to add to `elfeed' to load the configuration before it is run."
    (rmh-elfeed-org-process rmh-elfeed-org-files rmh-elfeed-org-tree-id))

  ;;;###autoload
  (defun elfeed-org ()
    "Hook up rmh-elfeed-org to read the `org-mode' configuration when elfeed is run."
    (interactive)
    (elfeed-log 'info "elfeed-org is set up to handle elfeed configuration")
    (advice-add #'elfeed :before #'rmh-elfeed-org-process-advice)
    (add-hook 'elfeed-new-entry-hook #'elfeed-org-run-new-entry-hook)
    (advice-add 'elfeed-apply-autotags-now :after #'rmh-elfeed-apply-autotags-now-advice)
    (add-hook 'elfeed-http-error-hooks
              (lambda (url _status)
                (when rmh-elfeed-org-auto-ignore-invalid-feeds
                  (rmh-elfeed-org-mark-feed-ignore url))))
    (add-hook 'elfeed-parse-error-hooks
              (lambda (url _error)
                (when rmh-elfeed-org-auto-ignore-invalid-feeds
                  (rmh-elfeed-org-mark-feed-ignore url)))))


  (provide 'elfeed-org)
  ;;; elfeed-org.el ends here
#+end_src

** simpc-mode
#+begin_src emacs-lisp :tangle ~/.emacs.d/.emacs.local/simpc-mode.el :mkdirp yes
  (require 'subr-x)

  (defvar simpc-mode-syntax-table
    (let ((table (make-syntax-table)))
      ;; C/C++ style comments
          (modify-syntax-entry ?/ ". 124b" table)
          (modify-syntax-entry ?* ". 23" table)
          (modify-syntax-entry ?\n "> b" table)
      ;; Preprocessor stuff?
      (modify-syntax-entry ?# "." table)
      ;; Chars are the same as strings
      (modify-syntax-entry ?' "\"" table)
      ;; Treat <> as punctuation (needed to highlight C++ keywords
      ;; properly in template syntax)
      (modify-syntax-entry ?< "." table)
      (modify-syntax-entry ?> "." table)

      (modify-syntax-entry ?& "." table)
      (modify-syntax-entry ?% "." table)
      table))

  (defun simpc-types ()
    '("char" "int" "long" "short" "void" "bool" "float" "double" "signed" "unsigned"
      "char16_t" "char32_t" "char8_t"
      "int8_t" "uint8_t" "int16_t" "uint16_t" "int32_t" "uint32_t" "int64_t" "uint64_t"
      "uintptr_t"
      "size_t"))

  (defun simpc-keywords ()
    '("auto" "break" "case" "const" "continue" "default" "do"
      "else" "enum" "extern" "for" "goto" "if" "register"
      "return"  "sizeof" "static" "struct" "switch" "typedef"
      "union"  "volatile" "while" "alignas" "alignof" "and"
      "and_eq" "asm" "atomic_cancel" "atomic_commit" "atomic_noexcept" "bitand"
      "bitor" "catch"  "class" "co_await"
      "co_return" "co_yield" "compl" "concept" "const_cast" "consteval" "constexpr"
      "constinit" "decltype" "delete" "dynamic_cast" "explicit" "export" "false" 
      "friend" "inline" "mutable" "namespace" "new" "noexcept" "not" "not_eq"
      "nullptr" "operator" "or" "or_eq" "private" "protected" "public" "reflexpr"
      "reinterpret_cast" "requires" "static_assert" "static_cast" "synchronized"
      "template" "this" "thread_local" "throw" "true" "try" "typeid" "typename"
      "using" "virtual" "wchar_t" "xor" "xor_eq"))

  (defun simpc-font-lock-keywords ()
    (list
     `("# *[#a-zA-Z0-9_]+" . font-lock-preprocessor-face)
     `("#.*include \\(\\(<\\|\"\\).*\\(>\\|\"\\)\\)" . (1 font-lock-string-face))
     `(,(regexp-opt (simpc-keywords) 'symbols) . font-lock-keyword-face)
     `(,(regexp-opt (simpc-types) 'symbols) . font-lock-type-face)))

  (defun simpc--previous-non-empty-line ()
    (save-excursion
      (forward-line -1)
      (while (and (not (bobp))
                  (string-empty-p
                   (string-trim-right
                    (thing-at-point 'line t))))
        (forward-line -1))
      (thing-at-point 'line t)))

  (defun simpc--indentation-of-previous-non-empty-line ()
    (save-excursion
      (forward-line -1)
      (while (and (not (bobp))
                  (string-empty-p
                   (string-trim-right
                    (thing-at-point 'line t))))
        (forward-line -1))
      (current-indentation)))

  (defun simpc--desired-indentation ()
    (let* ((cur-line (string-trim-right (thing-at-point 'line t)))
           (prev-line (string-trim-right (simpc--previous-non-empty-line)))
           (indent-len 4)
           (prev-indent (simpc--indentation-of-previous-non-empty-line)))
      (cond
       ((string-match-p "^\\s-*switch\\s-*(.+)" prev-line)
        prev-indent)
       ((and (string-suffix-p "{" prev-line)
             (string-prefix-p "}" (string-trim-left cur-line)))
        prev-indent)
       ((string-suffix-p "{" prev-line)
        (+ prev-indent indent-len))
       ((string-prefix-p "}" (string-trim-left cur-line))
        (max (- prev-indent indent-len) 0))
       ((string-suffix-p ":" prev-line)
        (if (string-suffix-p ":" cur-line)
            prev-indent
          (+ prev-indent indent-len)))
       ((string-suffix-p ":" cur-line)
        (max (- prev-indent indent-len) 0))
       (t prev-indent))))

  ;;; TODO: customizable indentation (amount of spaces, tabs, etc)
  (defun simpc-indent-line ()
    (interactive)
    (when (not (bobp))
      (let* ((desired-indentation
              (simpc--desired-indentation))
             (n (max (- (current-column) (current-indentation)) 0)))
        (indent-line-to desired-indentation)
        (forward-char n))))

  (define-derived-mode simpc-mode prog-mode "Simple C"
    "Simple major mode for editing C files."
    :syntax-table simpc-mode-syntax-table
    (setq-local font-lock-defaults '(simpc-font-lock-keywords))
    (setq-local indent-line-function 'simpc-indent-line)
    (setq-local comment-start "// "))

  (provide 'simpc-mode)
#+end_src

** c3-mode
#+begin_src emacs-lisp :tangle ~/.emacs.d/.emacs.local/c3-mode.el :mkdirp yes
  (require 'subr-x)

  (defvar c3-mode-syntax-table
    (let ((table (make-syntax-table)))
      ;; C/C++ style comments
      (modify-syntax-entry ?/ ". 124b" table)
      (modify-syntax-entry ?* ". 23" table)
      (modify-syntax-entry ?\n "> b" table)
      ;; Chars are the same as strings
      (modify-syntax-entry ?' "\"" table)
      ;; Treat <> as punctuation (needed to highlight C++ keywords
      ;; properly in template syntax)
      (modify-syntax-entry ?< "." table)
      (modify-syntax-entry ?> "." table)
      (modify-syntax-entry ?& "." table)
      (modify-syntax-entry ?% "." table)
      table))

  (defun c3-types ()
    '("void" "bool"
      "ichar" "char"
      ;; Integer types
      "short" "ushort" "int" "uint" "long" "ulong" "int128" "uint128"
      "iptr" "uptr"
      "isz" "usz"
      ;; Floating point types
      "float16" "float" "double" "float128"
      ;; Other types
      "any" "anyfault" "typeid"        
      ;; C compatibility types
      "CChar" "CShort" "CUShort" "CInt" "CUInt" "CLong" "CULong" "CLongLong" "CULongLong" "CFloat" "CDouble" "CLongDouble"
      ;; CT types
      "$typefrom" "$tyypeof" "$vatype"       
      ))

  (defun c3-keywords ()
    '("asm"         "assert"      "bitstruct"   
      "break"       "case"        "catch"
      "const"       "continue"    "def"
      "default"     "defer"       "distinct"
      "do"          "else"        "enum"        
      "extern"      "false"       "fault"
      "for"         "foreach"     "foreach_r"
      "fn"          "tlocal"      "if"
      "inline"      "import"      "macro"
      "module"      "nextcase"    "null"
      "return"      "static"      "struct"
      "switch"      "true"        "try"
      "union"       "var"         "while"
      "$alignof"    "$assert"     "$case"
      "$checks"     "$default"    "$defined"
      "$echo"       "$else"       "$endfor"
      "$endforeach" "$endif"      "$endswitch"
      "$for"        "$foreach"    "$if"
      "$include"    "$nameof"     "$offsetof"
      "$qnameof"    "$sizeof"     "$stringify"
      "$vacount"    "$vaconst"    "$varef"
      "$vaarg"      "$vaexpr"     "$vasplat" 
  ))

  (defun c3-font-lock-keywords ()
    (list
     `("#.*include \\(\\(<\\|\"\\).*\\(>\\|\"\\)\\)" . (1 font-lock-string-face))
     `(,(regexp-opt (c3-keywords) 'symbols) . font-lock-keyword-face)
     `(,(regexp-opt (c3-types) 'symbols) . font-lock-type-face)))

  (defun c3--space-prefix-len (line)
    (- (length line)
       (length (string-trim-left line))))

  (defun c3--previous-non-empty-line ()
    (save-excursion
      (forward-line -1)
      (while (and (not (bobp))
                  (string-empty-p
                   (string-trim-right
                    (thing-at-point 'line t))))
        (forward-line -1))
      (thing-at-point 'line t)))

  (defun c3--desired-indentation ()
    (let ((cur-line (string-trim-right (thing-at-point 'line t)))
          (prev-line (string-trim-right (c3--previous-non-empty-line)))
          (indent-len 4))
      (cond
       ((and (string-suffix-p "{" prev-line)
             (string-prefix-p "}" (string-trim-left cur-line)))
        (c3--space-prefix-len prev-line))
       ((string-suffix-p "{" prev-line)
        (+ (c3--space-prefix-len prev-line) indent-len))
       ((string-prefix-p "}" (string-trim-left cur-line))
        (max (- (c3--space-prefix-len prev-line) indent-len) 0))
       (t (c3--space-prefix-len prev-line)))))

  (defun c3-indent-line ()
    (interactive)
    (when (not (bobp))
      (let* ((current-indentation
              (c3--space-prefix-len (thing-at-point 'line t)))
             (desired-indentation
              (c3--desired-indentation))
             (n (max (- (current-column) current-indentation) 0)))
        (indent-line-to desired-indentation)
        (forward-char n))))

  ;;;###autoload
  (define-derived-mode c3-mode prog-mode "Simple C3"
    "Simple major mode for C3."
    :syntax-table c3-mode-syntax-table
    (setq-local font-lock-defaults '(c3-font-lock-keywords))
    (setq-local indent-line-function 'c3-indent-line)
    (setq-local comment-start "// "))

  ;;;###autoload
  (add-to-list 'auto-mode-alist '("\\.c3\\'" . c3-mode))
  (add-to-list 'auto-mode-alist '("\\.c3i\\'" . c3-mode))

  (provide 'c3-mode)
#+end_src

