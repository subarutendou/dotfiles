#+title Emacs settings
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

* Basic Settings
** Early Settings
   #+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
     (set-frame-parameter (selected-frame) 'alpha '(93 . 50))
     (add-to-list 'default-frame-alist '(alpha . (93 . 50)))

     (defun toggle-transparency ()
       (interactive)
       (let ((alpha (frame-parameter nil 'alpha)))
         (set-frame-parameter
          nil 'alpha
          (if (eql (cond ((numberp alpha) alpha)
                         ((numberp (cdr alpha)) (cdr alpha))
                         ;; Also handle undocumented (<active> <inactive>) form.
                         ((numberp (cadr alpha)) (cadr alpha)))
                   100)
              '(83 . 50) '(100 . 100)))))
     (global-set-key (kbd "C-c t") 'toggle-transparency)

     (set-language-environment "UTF-8")
     (set-default-coding-systems 'utf-8)
     (setq inhibit-startup-message t)
     (scroll-bar-mode -1)
     (tool-bar-mode -1)
     (tooltip-mode -1)
     (menu-bar-mode -1)
     (set-fringe-mode 10)
     (fset 'yes-or-no-p 'y-or-n-p)
     (setq visible-bell t)
     (setq use-dialog-box nil)
     (setq native-comp-async-report-warnings-errors nil)
     (column-number-mode 1)
     (when (version<= "26.0.50" emacs-version )
       (global-display-line-numbers-mode))
     (setq backup-directory-alist '(("." . "~/.emacs.d/backup")))

     (dolist (mode '(org-mode-hook
                     term-mode-hook
                     shell-mode-hook
                     eshell-mode-hook
                     vterm-mode-hook
                     pdf-view-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 0))))

     (set-face-attribute 'default nil :family "JetBrains Mono" :height 137)
     (set-fontset-font t nil "Fira Code" nil 'append)
   #+end_src
** Prerequest for package manager
   #+begin_src emacs-lisp
     (require 'package)
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

     (package-initialize)

     (unless package-archive-contents
       (package-refresh-contents))

     (unless (package-installed-p 'use-package)
       (package-insall 'use-package))
     (require 'use-package)
     (setq use-package-always-ensure t)
   #+end_src
** Theme
   #+begin_src emacs-lisp
     (use-package gruvbox-theme
       :config
       (load-theme 'gruvbox-dark-hard t))
   #+end_src
** EXWM
   #+begin_src emacs-lisp
     (require 'exwm-randr)
     ;; (setq exwm-randr-workspace-output-plist '(2 "eDP-1"))
     (add-hook 'exwm-randr-screen-change-hook
               (lambda ()
                 (start-process-shell-command
                  "xrandr" nil "xrandr --output eDP-1 --off --output DP-1 --primary --mode 1920x1080 --auto"
                  ;; "xrandr" nil "xrandr --output eDP-1 --mode 1920x1080 --pos 0x0 --rotate normal --output DP-1 --primary --mode 1920x1080 --pos 1920x0 --rotate normal --output HDMI-1 --off --output HDMI-2 --off"
                  )))
     (exwm-randr-enable)

     (use-package exwm
       :config
  
       (setq exwm-workspace-number 5)
       (add-hook 'exwm-update-class-hook
                 (lambda ()
                   (exwm-workspace-rename-buffer exwm-class-name)))

       (setq exwm-manage-configurations '((t char-mode t)))

       (setq exwm-input-prefix-keys
             '(?\C-x
               ?\C-u
               ?\C-h
               ?\M-x
               ?\M-`
               ?\M-&
               ?\M-:
               ?\C-\M-j  ;; Buffer list
               ?\C-\ ))  ;; Ctrl+Space

       (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

       (setq exwm-input-global-keys
             `(
               ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
               ([?\s-r] . exwm-reset)

               ;; Move between windows
               ([s-left] . windmove-left)
               ([s-right] . windmove-right)
               ([s-up] . windmove-up)
               ([s-down] . windmove-down)

               ;; Launch applications via shell command
               ([?\s-&] . (lambda (command)
                            (interactive (list (read-shell-command "$ ")))
                            (start-process-shell-command command nil command)))

               ;; Switch workspace
               ([?\s-w] . exwm-workspace-switch)
               ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

               ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
               ,@(mapcar (lambda (i)
                           `(,(kbd (format "s-%d" i)) .
                             (lambda ()
                               (interactive)
                               (exwm-workspace-switch-create ,i))))
                         (number-sequence 0 9))))
       (exwm-enable))
   #+end_src
** FrameWork
   #+begin_src emacs-lisp
     (blink-cursor-mode 0)

     (use-package xah-fly-keys
       :diminish xah-fly-keys
       :config
       (xah-fly-keys-set-layout "dvorak")
       (define-key xah-fly-n-keymap (kbd "e") 'vterm)
       (define-key xah-fly-command-map (kbd "b") 'swiper)
       (xah-fly-keys 1))

     (use-package vterm)
     (use-package diminish)
     (use-package counsel)
     (use-package flx)
     (use-package python-mode)
     (use-package rust-mode)
     (use-package all-the-icons)
     (use-package all-the-icons-dired)
     (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

     (use-package rainbow-delimiters
       :hook (prog-mode . rainbow-delimiters-mode))

     (use-package which-key
       :diminish which-key
       :defer 0
       :diminish which-key-mode
       :config
       (which-key-mode)
       (setq which-key-idle-delay 1))

     (use-package helpful
       :custom
       (counsel-describe-function-function #'helpful-callable)
       (counsel-describe-variable-function #'helpful-variable)
       :bind
       ([remap describe-function] . counsel-describe-function)
       ([remap describe-command] . helpful-command)
       ([remap describe-variable] . counsel-describe-variable)
       ([remap describe-key] . helpful-key))

     (use-package ivy
       :diminish ivy-mode
       :init
       (ivy-mode 1))

     (setq ivy-re-builders-alist
           '((ivy-switch-buffer . ivy--regex-plus)
             (t . ivy--regex-fuzzy)))
     (setq ivy-initial-inputs-alist nil)

     (use-package ivy-rich
       :init
       (ivy-rich-mode 1))

     (use-package ligature
       :load-path "~/.emacs.d/github/ligature.el/"
       :config
       ;; Enable the "www" ligature in every possible major mode
       (ligature-set-ligatures 't '("www"))
       ;; Enable traditional ligature support in eww-mode, if the
       ;; `variable-pitch' face supports it
       (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
       ;; Enable all Cascadia Code ligatures in programming modes
       (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                            ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                            "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                            "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                            "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                            "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                            "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                            "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                            ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                            "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                            "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                            "?=" "?." "??" ";;" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                            "\\\\" "://"))
       ;; Enables ligature checks globally in all buffers. You can also do it
       ;; per mode with `ligature-mode'.
       (global-ligature-mode t))
   #+end_src
** Keybind
      #+begin_src emacs-lisp
        (setq-default tab-width 4)
        (progn
          (setq-default indent-tabs-mode nil))
        (setq xah-fly-use-meta-key nil)
        (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
        (global-set-key (kbd "C-x w") 'elfeed)
        (setq shift-select-mode nil)
        (delete-selection-mode 1)
   #+end_src
* Package
** package
   #+begin_src emacs-lisp
     (use-package magit
       :custom
       (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

     (use-package pdf-tools
       :config
       (pdf-tools-install)
       (setq-default pdf-view-display-size 'fit-width)
       :custom
       (pdf-annot-activate-created-annotations t "automatically annotate Highlights"))

     (use-package elfeed)
     (setq elfeed-feeds
           '("http://lukesmith.xyz/rss.xml"
             "https://www.youtube.com/feeds/videos.xml?channel_id=UCld68syR8Wi-GY_n4CaoJGA"
             "https://www.youtube.com/feeds/videos.xml?channel_id=UCPf-EnX70UM7jqjKwhDmS8g"
             "http://www.youtube.com/feeds/videos.xml?channel_id=UCyl1z3jo3XHR1riLFKG5UAg"
             "http://www.youtube.com/feeds/videos.xml?channel_id=UC1CfXB_kRs3C-zaeTG3oGyg"))
     (add-hook 'elfeed-new-entry-hook
               (elfeed-make-tagger :before "2 weeks ago"
                                   :remove 'unread))
   #+end_src
** Org settings
*** basic
    #+begin_src emacs-lisp
      (use-package org
        :custom
        (org-agenda-start-with-log-mode t)
        (org-log-done 'time)
        (org-log-into-drawer t))
      ;; (org-agenda-files
      ;;  '("~/orgfile/Tasks.org")		; example
      ;;  '("~/orgfile/birthday.org")))

      (use-package org-bullets
        :hook (org-mode . org-bullets-mode)
        :custom
        (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

      ;; Replace list hyphen with dot
      (font-lock-add-keywords 'org-mode
                              '(("^ *\\([-]\\) "
                                 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

      (dolist (face '((org-level-1 . 1.2)
                      (org-level-2 . 1.1)
                      (org-level-3 . 1.05)
                      (org-level-4 . 1.0)
                      (org-level-5 . 1.1)
                      (org-level-6 . 1.1)
                      (org-level-7 . 1.1)
                      (org-level-8 . 1.1))))

      ;; Make sure org-indent face is available
      (require 'org-indent)
      (require 'org-tempo)
      (setq org-structure-template-alist
            '(("py" . "python")
              ("el" . "src emacs-lisp")
              ("rs" . "rust")
              ("a" . "export ascii\n")
              ("c" . "center\n")
              ("C" . "comment\n")
              ("e" . "example\n")
              ("E" . "export")
              ("h" . "export html\n")
              ("l" . "export latex\n")
              ("q" . "quote\n")
              ("s" . "src")
              ("v" . "verse\n")))
      (progn
        ;; no need to warn
        (put 'narrow-to-region 'disabled nil)
        (put 'narrow-to-page 'disabled nil)
        (put 'upcase-region 'disabled nil)
        (put 'downcase-region 'disabled nil)
        (put 'erase-buffer 'disabled nil)
        (put 'scroll-left 'disabled nil)
        (put 'dired-find-alternate-file 'disabled nil)
        )

      ;; Ensure that anything that should be fixed-pitch in Org files appears that way
      (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
      (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

      ;; Get rid of the background on column views
      (set-face-attribute 'org-column nil :background nil)
      (set-face-attribute 'org-column-title nil :background nil)
    #+end_src
*** auto tangle
    #+begin_src emacs-lisp
      (defun efs/org-babel-tangle-config()
        (when (string-equal (buffer-file-name)
                            (expand-file-name "~/dotfiles/arch.org"))
          (let ((org-confirm-babel-evaluate nil))
            (org-babel-tangle))))

      (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
    #+end_src
* ERC
  #+begin_src emacs-lisp
    (setq erc-server "irc.libera.chat"
          erc-nick "subaru"
          erc-user-full-name "subaru tendou"
          erc-track-shorten-start 8
          erc-autojoin-channels-alist '(("irc.libera.chat" "#systemcrafters" "#emacs"))
          erc-kill-buffer-on-part t
          erc-auto-query 'bury)
  #+end_src
* Keep .emacs.d Clean
  #+begin_src emacs-lisp
    ;; Change the user-emacs-directory to keep unwanted thing out of ~/.emacs.d
    (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
          url-history-file (expand-file-name "url/history" user-emacs-directory))

    ;; Use no-littering to automatically set common path to the new user-emacs-directory
    (use-package no-littering)

    ;; Keep customization settings in a temperary file
    (setq custom-file
          (if (boundp 'server-socket-dir)
              (expand-file-name "custom.el" server-socket-dir)
            (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  #+end_src
* System configuration
** xinitrc
   #+begin_src conf :tangle ~/.xinitrc
     #!/bin/sh

     export _JAVA_AWT_WM_NONREPARENTING=1

     # fcitx input
     # export GTK_IM_MODULE=fcitx
     # export QT_IM_MODULE=fcitx
     # export XMODIFIERS=@im=fcitx
     # fcitx5 -d -r

     # # Cursor and mouse behavier
     xset r rate 300 50 &
     xset s off &
     xset -dpms &
     unclutter &
     udiskie &
     picom -CGb --vsync --backend glx &
     pcloud -b &
     nitrogen --restore &

     exec dbus-launch --exit-with-session emacs -mm --debug-init
   #+end_src
** bashrc
   #+begin_src conf :tangle ~/.bashrc
     #!/bin/bash
     #
     # ~/.bashrc
     #

     # If not running interactively, don't do anything
     [[ $- != *i* ]] && return

     alias ls='ls --color=auto'
     PS1='[\u@\h \W]\$ '

     # scriptname - description of script

     # Text color variables
     txtund=$(tput sgr 0 1)          # Underline
     txtbld=$(tput bold)             # Bold
     bldred=${txtbld}$(tput setaf 1) #  red
     bldblu=${txtbld}$(tput setaf 4) #  blue
     bldwht=${txtbld}$(tput setaf 7) #  white
     txtrst=$(tput sgr0)             # Reset
     info=${bldwht}*${txtrst}        # Feedback
     pass=${bldblu}*${txtrst}
     warn=${bldred}*${txtrst}
     ques=${bldblu}?${txtrst}

     # my settings
     alias ll='ls -lah'
     alias la='ls -a'
     alias gpgl='gpg --list-secret-keys --keyid-format LONG'
     alias cl='sudo pacman -Rns $(pacman -Qdtq)'
     alias cpu='sudo auto-cpufreq --stats'
     alias te='tar -xvzf'

     # custom function
     dlweb() {
     wget --recursive --no-clobber --page-requisites --html-extension --convert-links --domains "$1" --no-parent "$2"	 
     }
   #+end_src
** bash_profile
   #+begin_src conf :tangle ~/.bash_profile
     #
     # ~/.bash_profile
     #

     [[ -f ~/.bashrc ]] && . ~/.bashrc

     PATH=$PATH:~/.local/bin

     if [[ -z $DISPLAY ]] && [[ $(tty) = /dev/tty1 ]]; then
     startx
     fi
   #+end_src
