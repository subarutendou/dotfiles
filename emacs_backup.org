* opacity
  #+begin_src emacs-lisp
    (set-frame-parameter (selected-frame) 'alpha '(85 . 50))
    (add-to-list 'default-frame-alist '(alpha . (85 . 50)))

    (defun toggle-transparency ()
       (interactive)
       (let ((alpha (frame-parameter nil 'alpha)))
         (set-frame-parameter
          nil 'alpha
          (if (eql (cond ((numberp alpha) alpha)
                         ((numberp (cdr alpha)) (cdr alpha))
                         ;; Also handle undocumented (<active> <inactive>) form.
                         ((numberp (cadr alpha)) (cadr alpha)))
                   100)
              '(85 . 50) '(100 . 100)))))
    (global-set-key (kbd "C-c t") 'toggle-transparency)
  #+end_src
* early-init
** Check startup time
   #+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
     ;; The default is 800 kilobytes.  Measured in bytes.
     (setq gc-cons-threshold (* 50 1000 1000))

     ;; Profile emacs startup
     (add-hook 'emacs-startup-hook
               (lambda ()
                 (message "*** Emacs loaded in %s with %d garbage collections."
                          (format "%.2f seconds"
                                  (float-time
                                   (time-subtract after-init-time before-init-time)))
                          gcs-done)))
   #+end_src
* Normal emacs
#+begin_src emacs-lisp
  (setq xah-fly-use-meta-key nil)
  (electric-pair-mode 1)
  (use-package diminish)
  (use-package counsel)
  (use-package guix)

  (use-package doom-modeline
    :hook (after-init . doom-modeline-init)
    :custom-face
    (mode-line ((t (:height 0.85))))
    (mode-line-inactive ((t (:height 0.85))))
    :custom
    (doom-modeline-height 15)
    (doom-modeline-bar-width 6)
    (doom-modeline-lsp t)
    (doom-modeline-github nil)
    (doom-modeline-mu4e nil)
    (doom-modeline-irc t)
    (doom-modeline-minor-modes t)
    (doom-modeline-persp-name nil)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-major-mode-icon nil))

  (use-package emojify
    :hook (after-init . global-emojify-mode))

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package which-key
    :diminish which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

  (use-package ligature
    :load-path "~/.emacs.d/github/ligature.el/"
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                         ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                         "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                         "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                         "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                         "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                         "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                         "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                         ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                         "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                         "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                         "?=" "?." "??" ";;" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                         "\\\\" "://"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))

  (use-package consult
    :hook (completion-list-mode . consult-preview-at-point-mode))

  (use-package perspective
    :demand t
    :bind (("C-M-k" . persp-switch)
           ("C-M-n" . persp-next)
           ("C-x k" . persp-kill-buffer*))
    :custom
    (persp-initial-frame-name "Main")
    :config
    ;; Running `persp-mode' multiple times resets the perspective list...
    (unless (equal persp-mode t)
      (persp-mode)))
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  (use-package ivy
    :diminish ivy-mode
    :init
    (ivy-mode 1))

  (setq ivy-re-builders-alist
        '((ivy-switch-buffer . ivy--regex-plus)
          (t . ivy--regex-fuzzy)))
  (setq ivy-initial-inputs-alist nil)

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src
* bash
  #+begin_src conf
    export PATH=$HOME/.local/bin:$PATH
    export EDITOR='emacsclient -c'
    export VISUAL='emacsclient -c'
  #+end_src

* settings
  #+begin_src emacs-lisp
    (define-key xah-fly-command-map (kbd "b") 'swiper)
  #+end_src

* vertico
  #+begin_src emacs-lisp
    (use-package vertico
      :init
      (vertico-mode))

    (use-package orderless
      :init
      (setq completion-styless '(orderless)
            completion-category-defaults nil
            completion-cotegory-overrides '((file (styles partial-completion)))))

    (savehist-mode 1)

    (defun crm-indicator (arg)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'comleting-read-multiple :filter-args #'crm-indicator)

    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'monobuffer-setup-hook #'cursor-intangible-mode)

    (setq enable-recursive-minibuffers t)
  #+end_src
* package
  #+begin_src emacs-lisp
    (use-package emojify
      :hook (after-init . global-emojify-mode))
  #+end_src
