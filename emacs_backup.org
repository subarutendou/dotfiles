* opacity
  #+begin_src emacs-lisp
    (set-frame-parameter (selected-frame) 'alpha '(95 . 50))
    (add-to-list 'default-frame-alist '(alpha . (95 . 50)))
  #+end_src
* early-init
** Check startup time
   #+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
     ;; The default is 800 kilobytes.  Measured in bytes.
     (setq gc-cons-threshold (* 50 1000 1000))

     ;; Profile emacs startup
     (add-hook 'emacs-startup-hook
	       (lambda ()
		 (message "*** Emacs loaded in %s with %d garbage collections."
			  (format "%.2f seconds"
				  (float-time
				   (time-subtract after-init-time before-init-time)))
			  gcs-done)))
   #+end_src
* Normal emacs
#+begin_src emacs-lisp
  (electric-pair-mode 1)
  (use-package diminish)
  (use-package counsel)
  (use-package guix)

  (use-package doom-modeline
    :hook (after-init . doom-modeline-init)
    :custom-face
    (mode-line ((t (:height 0.85))))
    (mode-line-inactive ((t (:height 0.85))))
    :custom
    (doom-modeline-height 15)
    (doom-modeline-bar-width 6)
    (doom-modeline-lsp t)
    (doom-modeline-github nil)
    (doom-modeline-mu4e nil)
    (doom-modeline-irc t)
    (doom-modeline-minor-modes t)
    (doom-modeline-persp-name nil)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-major-mode-icon nil))

  (use-package emojify
    :hook (after-init . global-emojify-mode))

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package which-key
    :diminish which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  (use-package ivy
    :init
    (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  (use-package ligature
    :load-path "~/.emacs.d/github/ligature.el/"
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
					   ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
					   "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
					   "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
					   "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
					   "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
					   "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
					   "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
					   ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
					   "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
					   "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
					   "?=" "?." "??" ";;" "/=" "/>" "//" "__" "~~" "(*" "*)"
					   "\\\\" "://"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))

  (use-package consult
    :hook (completion-list-mode . consult-preview-at-point-mode))

  (use-package perspective
    :demand t
    :bind (("C-M-k" . persp-switch)
	   ("C-M-n" . persp-next)
	   ("C-x k" . persp-kill-buffer*))
    :custom
    (persp-initial-frame-name "Main")
    :config
    ;; Running `persp-mode' multiple times resets the perspective list...
    (unless (equal persp-mode t)
      (persp-mode)))
#+end_src
* Org Mode
  #+begin_src emacs-lisp

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
  #+end_src
* EXWM
  #+begin_src emacs-lisp
    ;; EXWM settings
    (defun efs/exwm-update-class ()
      (exwm-workspace-rename-buffer exwm-class-name))

    (use-package exwm
      :config
      ;; Set the default number of workspaces
      (setq exwm-workspace-number 5)

      ;; When window "class" updates, use it to set the buffer name
      (add-hook 'exwm-update-class-hook #'efs/exwm-update-class)

      ;; Rebind CapsLock to Ctrl
      (start-process-shell-command "xmodmap" nil "xmodmap ~/.emacs.d/exwm/Xmodmap")

      ;; Set the screen resolution (update this to be the correct resolution for your screen!)
      (require 'exwm-randr)
      (exwm-randr-enable)
      ;; (start-process-shell-command "xrandr" nil "xrandr --output Virtual-1 --primary --mode 2048x1152 --pos 0x0 --rotate normal")

      ;; These keys should always pass through to Emacs
      (setq exwm-input-prefix-keys
	'(?\C-x
	  ?\C-u
	  ?\C-h
	  ?\M-x
	  ?\M-`
	  ?\M-&
	  ?\M-:
	  ?\C-\M-j  ;; Buffer list
	  ?\C-\ ))  ;; Ctrl+Space

      ;; Ctrl+Q will enable the next key to be sent directly
      (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

      ;; Set up global key bindings.  These always work, no matter the input state!
      ;; Keep in mind that changing this list after EXWM initializes has no effect.
      (setq exwm-input-global-keys
	    `(
	      ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
	      ([?\s-r] . exwm-reset)

	      ;; Move between windows
	      ([s-left] . windmove-left)
	      ([s-right] . windmove-right)
	      ([s-up] . windmove-up)
	      ([s-down] . windmove-down)

	      ;; Launch applications via shell command
	      ([?\s-&] . (lambda (command)
			   (interactive (list (read-shell-command "$ ")))
			   (start-process-shell-command command nil command)))

	      ;; Switch workspace
	      ([?\s-w] . exwm-workspace-switch)
	      ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

	      ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
	      ,@(mapcar (lambda (i)
			  `(,(kbd (format "s-%d" i)) .
			    (lambda ()
			      (interactive)
			      (exwm-workspace-switch-create ,i))))
			(number-sequence 0 9))))

      (exwm-enable))
  #+end_src

* EXWM without use-package
  #+begin_src emacs-lisp
    (defun efs/exwm-update-class ()
      (exwm-workspace-rename-buffer exwm-class-name))

    (require 'exwm)

    (setq exwm-workspace-number 5)
    (add-hook 'exwm-update-class-hook #'efs/exwm-update-class)

    (require 'exwm-randr)
    (exwm-randr-enable)

    (setq exwm-input-prefix-keys
	'(?\C-x
	  ?\C-u
	  ?\C-h
	  ?\M-x
	  ?\M-`
	  ?\M-&
	  ?\M-:
	  ?\C-\M-j  ;; Buffer list
	  ?\C-\ ))  ;; Ctrl+Space

    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    (setq exwm-input-global-keys
	    `(
	      ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
	      ([?\s-r] . exwm-reset)

	      ;; Move between windows
	      ([s-left] . windmove-left)
	      ([s-right] . windmove-right)
	      ([s-up] . windmove-up)
	      ([s-down] . windmove-down)

	      ;; Launch applications via shell command
	      ([?\s-&] . (lambda (command)
			   (interactive (list (read-shell-command "$ ")))
			   (start-process-shell-command command nil command)))

	      ;; Switch workspace
	      ([?\s-w] . exwm-workspace-switch)
	      ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

	      ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
	      ,@(mapcar (lambda (i)
			  `(,(kbd (format "s-%d" i)) .
			    (lambda ()
			      (interactive)
			      (exwm-workspace-switch-create ,i))))
			(number-sequence 0 9))))
    (exwm-enable)
  #+end_src

* bash
  #+begin_src conf
    export PATH=$HOME/.local/bin:$PATH
    export EDITOR='emacsclient -c'
    export VISUAL='emacsclient -c'
  #+end_src
