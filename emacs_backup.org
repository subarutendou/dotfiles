#+title Emacs settings
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

* Basic Settings
** Early Settings
   #+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
     (set-language-environment "UTF-8")
     (set-default-coding-systems 'utf-8)
     (setq inhibit-startup-message t)
     (scroll-bar-mode -1)
     (tool-bar-mode -1)
     (tooltip-mode -1)
     (menu-bar-mode -1)
     (set-fringe-mode 10)
     (fset 'yes-or-no-p 'y-or-n-p)
     (setq visible-bell t)
     (setq use-dialog-box nil)
     (setq native-comp-async-report-warnings-errors nil)
     (column-number-mode 1)
     (when (version<= "26.0.50" emacs-version )
       (global-display-line-numbers-mode))
     (setq backup-directory-alist '(("." . "~/.emacs.d/backup")))

     (dolist (mode '(org-mode-hook
                     term-mode-hook
                     shell-mode-hook
                     eshell-mode-hook
                     vterm-mode-hook
                     pdf-view-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 0))))

     ;; (set-face-attribute 'default nil :family "JetBrainsMono Nerd Font Mono" :height 137)
     (set-face-attribute 'default nil :family "Comic Code" :height 137)
     ;; (set-fontset-font t nil "JetBrains Mono" nil 'append)
     ;; (set-fontset-font t nil "Fira Code" nil 'append)
     (setq ido-enable-flex-matching t)
     (setq ido-everywhere t)
     (ido-mode 1)
     (setq ido-use-filename-at-point 'guess)
     (setq display-line-numbers-type 'relative)
   #+end_src
** Prerequest for package manager
   #+begin_src emacs-lisp
     (require 'package)
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

     (package-initialize)

     (unless package-archive-contents
       (package-refresh-contents))

     (unless (package-installed-p 'use-package)
       (package-install 'use-package))
     (require 'use-package)
     (setq use-package-always-ensure t)
   #+end_src
** Theme
   #+begin_src emacs-lisp
     (use-package nord-theme
       :config
       (load-theme 'nord t))
   #+end_src
** Package
*** Intergrate
    #+begin_src emacs-lisp
      (blink-cursor-mode 0)

      (use-package xah-fly-keys
        :diminish xah-fly-keys
        :config
        ;; (xah-fly-keys-set-layout "qwerty")
        (xah-fly-keys-set-layout "colemak-mod-dh-new")
        (define-key xah-fly-n-keymap (kbd "s") 'vterm)
        ;; (define-key xah-fly-n-keymap (kbd "e") 'vterm)
        (xah-fly-keys 1))

      (use-package vterm)
      (use-package diminish)
      (use-package flx)
      (use-package python-mode)
      (use-package rust-mode)
      (use-package csharp-mode)

      (use-package rainbow-delimiters
        :hook (prog-mode . rainbow-delimiters-mode))

      (use-package which-key
        :diminish which-key
        :defer 0
        :diminish which-key-mode
        :config
        (which-key-mode)
        (setq which-key-idle-delay 1))

      (use-package ligature
        :load-path "~/.emacs.d/github/ligature.el/"
        :config
        ;; Enable the "www" ligature in every possible major mode
        (ligature-set-ligatures 't '("www"))
        ;; Enable traditional ligature support in eww-mode, if the
        ;; `variable-pitch' face supports it
        (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
        ;; Enable all Cascadia Code ligatures in programming modes
        (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                             ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                             "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                             "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                             "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                             "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                             "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                             "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                             ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                             "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                             "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                             "?=" "?." "??" ";;" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                             "\\\\" "://"))
        ;; Enables ligature checks globally in all buffers. You can also do it
        ;; per mode with `ligature-mode'.
        (global-ligature-mode t))

      (use-package vertico
        :init
        (vertico-mode))

      (use-package orderless
        :init
        (setq completion-styless '(orderless)
              completion-category-defaults nil
              completion-cotegory-overrides '((file (styles partial-completion)))))

      (savehist-mode 1)

      (defun crm-indicator (arg)
        (cons (concat "[CRM] " (car args)) (cdr args)))
      (advice-add #'comleting-read-multiple :filter-args #'crm-indicator)

      (setq minibuffer-prompt-properties
            '(read-only t cursor-intangible t face minibuffer-prompt))
      (add-hook 'monobuffer-setup-hook #'cursor-intangible-mode)

      (setq enable-recursive-minibuffers t)
    #+end_src
*** Application
    #+begin_src emacs-lisp
      (use-package magit
        :custom
        (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

      (use-package elfeed)
      (setq elfeed-feeds
            '("http://lukesmith.xyz/rss.xml"
              "https://www.youtube.com/feeds/videos.xml?channel_id=UCld68syR8Wi-GY_n4CaoJGA"
              "https://www.youtube.com/feeds/videos.xml?channel_id=UCPf-EnX70UM7jqjKwhDmS8g"
              "http://www.youtube.com/feeds/videos.xml?channel_id=UCyl1z3jo3XHR1riLFKG5UAg"
              "http://www.youtube.com/feeds/videos.xml?channel_id=UC1CfXB_kRs3C-zaeTG3oGyg"))
      (add-hook 'elfeed-new-entry-hook
                (elfeed-make-tagger :before "2 weeks ago"
                                    :remove 'unread))
    #+end_src
** Keybind
      #+begin_src emacs-lisp
        (setq-default tab-width 4)
        (progn
          (setq-default indent-tabs-mode nil))
        (setq xah-fly-use-meta-key nil)
        (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
        (global-set-key (kbd "C-x w") 'elfeed)
   #+end_src
** Org settings
*** basic
    #+begin_src emacs-lisp
      (use-package org
        :custom
        (org-agenda-start-with-log-mode t)
        (org-log-done 'time)
        (org-log-into-drawer t))
      ;; (org-agenda-files
      ;;  '("~/orgfile/Tasks.org")		; example
      ;;  '("~/orgfile/birthday.org")))

      (use-package org-bullets
        :hook (org-mode . org-bullets-mode)
        :custom
        (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

      ;; Replace list hyphen with dot
      (font-lock-add-keywords 'org-mode
                              '(("^ *\\([-]\\) "
                                 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

      (dolist (face '((org-level-1 . 1.2)
                      (org-level-2 . 1.1)
                      (org-level-3 . 1.05)
                      (org-level-4 . 1.0)
                      (org-level-5 . 1.1)
                      (org-level-6 . 1.1)
                      (org-level-7 . 1.1)
                      (org-level-8 . 1.1))))

      ;; Make sure org-indent face is available
      (require 'org-indent)
      (require 'org-tempo)
      (setq org-structure-template-alist
            '(("py" . "python")
              ("el" . "src emacs-lisp")
              ("rs" . "rust")
              ("a" . "export ascii\n")
              ("c" . "center\n")
              ("C" . "comment\n")
              ("e" . "example\n")
              ("E" . "export")
              ("h" . "export html\n")
              ("l" . "export latex\n")
              ("q" . "quote\n")
              ("s" . "src")
              ("v" . "verse\n")))
      (progn
        ;; no need to warn
        (put 'narrow-to-region 'disabled nil)
        (put 'narrow-to-page 'disabled nil)
        (put 'upcase-region 'disabled nil)
        (put 'downcase-region 'disabled nil)
        (put 'erase-buffer 'disabled nil)
        (put 'scroll-left 'disabled nil)
        (put 'dired-find-alternate-file 'disabled nil)
        )

      ;; Ensure that anything that should be fixed-pitch in Org files appears that way
      (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
      (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

      ;; Get rid of the background on column views
      (set-face-attribute 'org-column nil :background nil)
      (set-face-attribute 'org-column-title nil :background nil)
    #+end_src
*** auto tangle
    #+begin_src emacs-lisp
      (defun efs/org-babel-tangle-config()
        (when (string-equal (buffer-file-name)
                            (expand-file-name "~/dotfiles/arch.org"))
          (let ((org-confirm-babel-evaluate nil))
            (org-babel-tangle))))

      (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
    #+end_src
* ERC
  #+begin_src emacs-lisp
    (setq erc-server "irc.libera.chat"
          erc-nick "subaru"
          erc-user-full-name "subaru tendou"
          erc-track-shorten-start 8
          erc-autojoin-channels-alist '(("irc.libera.chat" "#systemcrafters" "#emacs"))
          erc-kill-buffer-on-part t
          erc-auto-query 'bury)
  #+end_src
* Keep .emacs.d Clean
  #+begin_src emacs-lisp
    ;; Change the user-emacs-directory to keep unwanted thing out of ~/.emacs.d
    (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
          url-history-file (expand-file-name "url/history" user-emacs-directory))

    ;; Use no-littering to automatically set common path to the new user-emacs-directory
    (use-package no-littering)

    ;; Keep customization settings in a temperary file
    (setq custom-file
          (if (boundp 'server-socket-dir)
              (expand-file-name "custom.el" server-socket-dir)
            (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  #+end_src
* System configuration
** xinitrc
   #+begin_src conf :tangle ~/.xinitrc
     #!/bin/bash

     export _JAVA_AWT_WM_NONREPARENTING=1

     # # Cursor and mouse behavier
     xset r rate 300 50 &
     xset s off &
     xset -dpms &
     unclutter &
     udiskie &
     picom -CGb --vsync --backend glx &
     pcloud -b &
     nitrogen --restore &
     emacs &
     # st&

     # exec dbus-launch --exit-with-session emacs -mm --debug-init
     exec dwm
   #+end_src
** zsh
   #+begin_src conf :tangle ~/.zshrc
     export PATH=$PATH:/home/tendou/.local/bin

     # zsh config
     for f in /home/tendou/.shellConfig/*; do source "$f"; done

     # Enable colors and change prompt:
     autoload -U colors && colors # Load colors
     autoload -Uz vcs_info
     precmd_vcs_info() { vcs_info }
     precmd_functions+=( precmd_vcs_info )
     setopt prompt_subst
     RPROMPT=\$vcs_info_msg_0_
     zstyle ':vcs_info:git:*' formats 'on branch %b'
     PROMPT='%B%F{yellow}%2~ %b%B%F{white}${vcs_info_msg_0_}%B%F{gray}%(!.#h.>) '
     # PROMPT=\$vcs_info_msg_0_'%# '

     # Disable ctrl-s to freeze terminal.
     stty stop undef

     # Lines configured by zsh-newuser-install
     HISTFILE=/home/tendou/.config/.histfile
     HISTSIZE=50000
     SAVEHIST=50000
     bindkey -e

     # The following lines were added by compinstall
     zstyle :compinstall filename '/home/tendou/.zshrc'

     autoload -Uz compinit && compinit
     # End of lines added by compinstall

     # User config
     # . /usr/share/LS_COLORS/dircolors.sh

     # Syntax highlight plugin put at the end
     source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

     # Just a backup solution for prompt color
     # PS1="%B%{$fg[red]%}[%{$fg[yellow]%}%n%{$fg[green]%}@%{$fg[blue]%}%M %{$fg[magenta]%}%1~%{$fg[red]%}]%{$reset_color%}$%b "

     # Reference fomr "https://scriptingosx.com/2019/07/moving-to-zsh-06-customizing-the-zsh-prompt/"
     # PROMPT="%B%F{yellow}%2~%f%b %(!.#h.> )"
     # RPROMPT="%F{white}[%*]"

     # Don't want the auto cd anymore but put it here in cast I want it back
     # setopt autocd  # Automatically cd into typed directory.
   #+end_src
** zsh alias
   #+begin_src conf :tangle ~/.shellConfig/aliases
     # Alias
     alias ls='ls -CF --color=auto'
     alias la='ls -A'
     alias ll='ls -alF'
     alias suspend='sudo systemctl suspend'
     alias gs='git status'
     alias grep='grep --color=auto'
     alias rm='rm -i'
     alias mv='mv -i'
     alias tmux='tmux -u'
     # alias ll='ls -lah'
     # alias la='ls -a'
     alias gpgl='gpg --list-secret-keys --keyid-format LONG'
     alias cl='sudo pacman -Rns $(pacman -Qdtq)'
     alias cpu='sudo auto-cpufreq --stats'
     alias te='tar -xvzf'
   #+end_src
** zsh profile
   #+begin_src conf :tangle ~/.zprofile
     export PATH=$PATH"$HOME/.local/bin"
     export PATH="$HOME/.cargo/bin:$PATH"
     # export VISUAL="emacsclient -c -a emacs" # $VISUAL opens in GUI mode
     export VISUAL=emacs
     export EDITOR="$VISUAL"
     export HISTCONTROL=ignoreboth
     export LESS_TERMCAP_mb=$'\e[1;32m'
     export LESS_TERMCAP_md=$'\e[1;32m'
     export LESS_TERMCAP_me=$'\e[0m'
     export LESS_TERMCAP_se=$'\e[0m'
     export LESS_TERMCAP_so=$'\e[01;33m'
     export LESS_TERMCAP_ue=$'\e[0m'
     export LESS_TERMCAP_us=$'\e[1;4;31m'
     # eval "$(gh completion -s zsh)"
   #+end_src
** nvim
   #+begin_src conf :tangle ~/.config/nvim/init.vim
     syntax enable
     set nohlsearch
     set encoding=utf-8
     set pumheight=10
     set fileencoding=utf-8
     set guicursor=
     set hidden
     set noerrorbells
     set tabstop=4 softtabstop=4
     set shiftwidth=4
     set expandtab
     set smartindent
     set relativenumber
     set number
     set nowrap
     set noswapfile
     set nobackup
     set nowritebackup
     set updatetime=300
     set clipboard+=unnamedplus
     set autochdir
     set undodir=~/.config/nvim/undodir
     set undofile
     set scrolloff=8
     set incsearch
     set colorcolumn=80
     set signcolumn=yes
     set updatetime=50
     set shortmess+=c

     if exists('+termguicolors')
       let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
       let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
       set termguicolors
     endif

     highlight ColorColumn ctermbg=0 guibg=lightgrey

     "Vim-Plug

     call plug#begin('~/.config/nvim/plugged')

     Plug 'nvim-telescope/telescope.nvim'
     Plug 'jremmen/vim-ripgrep'
     Plug 'tpope/vim-fugitive'
     Plug 'vim-utils/vim-man'
     " Plug 'lyuts/vim-rtags'
     Plug 'mbbill/undotree'
     Plug 'Chiel92/vim-autoformat'
     Plug 'jiangmiao/auto-pairs'
     " Plug 'Shougo/deoplete.nvim'
     Plug 'tpope/vim-commentary'
     Plug 'ptzz/lf.vim'
     Plug 'junegunn/fzf.vim'
     Plug 'ThePrimeagen/vim-be-good'
     Plug 'tpope/vim-fugitive'
     Plug 'easymotion/vim-easymotion'
     Plug 'tpope/vim-fugitive'

     " color_schemes
     Plug 'gruvbox-community/gruvbox'
     Plug 'arcticicestudio/nord-vim'

     call plug#end()

     colorscheme nord
     highlight Normal guibg=none

     if executable('rg')
         let g:rg_derive_root = 'true'
     endif

     let g:netrw_browse_split = 2
     let g:netrw_banner = 0
     let g:netrw_winsize = 25
     let g:netrw_liststyle = 3

     let g:deoplete#enable_at_startup = 1

     function! s:check_back_space() abort
         let col = col('.') - 1
         return !col || getline('.')[col - 1]  =~# '\s'
     endfunction

     "Other Setting

     "Status-Line
     set statusline=
     set statusline+=
     set statusline+=\ %M
     set statusline+=\ %y
     set statusline+=\ %r
     set statusline+=\ %F

     set statusline+=%= "Right side setttings"
     set statusline+=\ %c:%l/%L
     set statusline+=\ %p%%
     set statusline+=\ [%n]

     fun! TrimWhitespace()
         let l:save = winsaveview()
         keeppatterns %s/\s\+$//e
         call winrestview(l:save)
     endfun

     autocmd BufWritePre * :call TrimWhitespace()

     "Key Config

     " Disable arrow key and backspace
      noremap  <Up> ""
      noremap! <Up> <Esc>
      noremap  <Down> ""
      noremap! <Down> <Esc>
      noremap  <Left> ""
      noremap! <Left> <Esc>
      noremap  <Right> ""
      noremap! <Right> <Esc>

     :inoremap <BS> <Nop>
     :inoremap <Del> <Nop>

     " Remap splits navigation
     "nnoremap <leader>n :Vexplore<CR>
     nnoremap <leader>h :wincmd h<CR>
     nnoremap <leader>j :wincmd j<CR>
     nnoremap <leader>k :wincmd k<CR>
     nnoremap <leader>l :wincmd l<CR>

     " Make adjusing split sizes a bit more frendly
     nnoremap <M-l> :vertical resize +3<CR>
     nnoremap <M-h> :vertical resize -3<CR>
     nnoremap <M-k> :resize +3<CR>
     nnoremap <M-j> :resize -3<CR>

     " Change 2 split windows from vertical to horizon or horizon to vertical
     map <leader>th <C-w>t<C-w>H
     map <leader>tk <C-w>t<C-w>K

     nnoremap <leader>u :UndotreeShow<CR>
     nnoremap <leader>pv :wincmd v<bar> :Ex <bar> :vertical resize 30<CR>
     nnoremap <Leader>ps :Rg<SPACE>
     nnoremap <silent> <Leader>+ :vertical resize +5<CR>
     nnoremap <silent> <Leader>- :vertical resize -5<CR>
     vnoremap J :m '>+1<CR>gv=gv'
     vnoremap K :m '<-2<CR>gv=gv'

     " inoremap <silent><expr> <TAB>
     "             \ pumvisible() ? "\<C-n>" :
     "             \ <SID>check_back_space() ? "\<TAB>" :
     "             \ coc#refresh()

     map <leader>t :new term://zsh<CR>

     " Cargo
     "nnoremap <leader>c :!cargo clippy

     " autoformat
     noremap <F3> :Autoformat<CR>

     " remap the fucking escape key
     inoremap jj <Esc>

     " Replace all is aliased to S.
     nnoremap S :%s//g<left><left>

     " easymotion
     map <leader><leader>. <Plug>(easymotion-repeat)
     map <leader><leader>f <Plug>(easymotion-overwin-f)
     map <leader><leader>j <Plug>(easymotion-overwin-line)
     map <leader><leader>k <Plug>(easymotion-overwin-line)
     map <leader><leader>w <Plug>(easymotion-overwin-w)

     " save with sudo
     command W :execute ':silent w !sudo tee % > /dev/null' | :edit!
   #+end_src
* opacity
  #+begin_src emacs-lisp
    (set-frame-parameter (selected-frame) 'alpha '(85 . 50))
    (add-to-list 'default-frame-alist '(alpha . (85 . 50)))

    (defun toggle-transparency ()
       (interactive)
       (let ((alpha (frame-parameter nil 'alpha)))
         (set-frame-parameter
          nil 'alpha
          (if (eql (cond ((numberp alpha) alpha)
                         ((numberp (cdr alpha)) (cdr alpha))
                         ;; Also handle undocumented (<active> <inactive>) form.
                         ((numberp (cadr alpha)) (cadr alpha)))
                   100)
              '(85 . 50) '(100 . 100)))))
    (global-set-key (kbd "C-c t") 'toggle-transparency)
  #+end_src
* Theme setting
  #+begin_src emacs-lisp
    ;; Use `nord4` from Nord's "Snow Storm" palette as background color.
    (setq nord-region-highlight "frost")
    (setq nord-region-highlight "snowstorm")
      (if (display-graphic-p)
          (load-theme 'gruvbox-dark-medium t)
        (load-theme 'wombat t))
  #+end_src
* early-init
** Check startup time
   #+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
     ;; The default is 800 kilobytes.  Measured in bytes.
     (setq gc-cons-threshold (* 50 1000 1000))

     ;; Profile emacs startup
     (add-hook 'emacs-startup-hook
               (lambda ()
                 (message "*** Emacs loaded in %s with %d garbage collections."
                          (format "%.2f seconds"
                                  (float-time
                                   (time-subtract after-init-time before-init-time)))
                          gcs-done)))
   #+end_src
* Normal emacs
#+begin_src emacs-lisp
  (setq xah-fly-use-meta-key nil)
  (electric-pair-mode 1)
  (use-package diminish)
  (use-package guix)
  (use-package all-the-icons)
  (use-package all-the-icons-dired)
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

  (use-package doom-modeline
    :hook (after-init . doom-modeline-init)
    :custom-face
    (mode-line ((t (:height 0.85))))
    (mode-line-inactive ((t (:height 0.85))))
    :custom
    (doom-modeline-height 15)
    (doom-modeline-bar-width 6)
    (doom-modeline-lsp t)
    (doom-modeline-github nil)
    (doom-modeline-mu4e nil)
    (doom-modeline-irc t)
    (doom-modeline-minor-modes t)
    (doom-modeline-persp-name nil)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-major-mode-icon nil))

  (use-package emojify
    :hook (after-init . global-emojify-mode))

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package which-key
    :diminish which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

  (use-package ligature
    :load-path "~/.emacs.d/github/ligature.el/"
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                         ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                         "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                         "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                         "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                         "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                         "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                         "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                         ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                         "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                         "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                         "?=" "?." "??" ";;" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                         "\\\\" "://"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))

  (use-package consult
    :hook (completion-list-mode . consult-preview-at-point-mode))

  (use-package perspective
    :demand t
    :bind (("C-M-k" . persp-switch)
           ("C-M-n" . persp-next)
           ("C-x k" . persp-kill-buffer*))
    :custom
    (persp-initial-frame-name "Main")
    :config
    ;; Running `persp-mode' multiple times resets the perspective list...
    (unless (equal persp-mode t)
      (persp-mode)))
#+end_src
* settings
  #+begin_src emacs-lisp
    (define-key xah-fly-command-map (kbd "b") 'swiper)
  #+end_src
** bash
   #+begin_src conf
     export PATH=$HOME/.local/bin:$PATH
     export EDITOR='emacsclient -c'
     export VISUAL='emacsclient -c'
   #+end_src
** xinintrc
   #+begin_src conf
     export DefaultIMModule=fcitx
     export GTK_IM_MODULE=fcitx
     export QT_IM_MODULE=fcitx
     export XMODIFIERS=@im=fcitx
     fcitx5 &
   #+end_src
* vertico
  #+begin_src emacs-lisp
    (use-package vertico
      :init
      (vertico-mode))

    (use-package orderless
      :init
      (setq completion-styless '(orderless)
            completion-category-defaults nil
            completion-cotegory-overrides '((file (styles partial-completion)))))

    (savehist-mode 1)

    (defun crm-indicator (arg)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'comleting-read-multiple :filter-args #'crm-indicator)

    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'monobuffer-setup-hook #'cursor-intangible-mode)

    (setq enable-recursive-minibuffers t)
  #+end_src
* package
  #+begin_src emacs-lisp
    (use-package emojify
      :hook (after-init . global-emojify-mode))
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))

  #+end_src
* ivy
  #+begin_src emacs-lisp
    (use-package ivy
      :diminish
      :bind (("C-s" . swiper)
	     :map ivy-minibuffer-map
	     ("TAB" . ivy-alt-done)
	     ("C-f" . ivy-alt-done)
	     ("C-l" . ivy-alt-done)
	     ("C-j" . ivy-next-line)
	     ("C-k" . ivy-previous-line)
	     :map ivy-switch-buffer-map
	     ("C-k" . ivy-previous-line)
	     ("C-l" . ivy-done)
	     ("C-d" . ivy-switch-buffer-kill)
	     :map ivy-reverse-i-search-map
	     ("C-k" . ivy-previous-line)
	     ("C-d" . ivy-reverse-i-search-kill))
      :init
      (ivy-mode 1)
      :config
      (setq ivy-magic-slash-non-match-action nil)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-wrap t)
      (setq ivy-count-format "(%d/%d) ")
      (setq enable-recursive-minibuffers t)

      ;; Use different regex strategies per completion command
      ;;(push '(completion-at-point . ivy--regex-fuzzy) ivy-re-builders-alist) ;; This doesn't seem to work...
      (push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)
      (push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist)

      ;; Set minibuffer height for different commands
      (setf (alist-get 'counsel-projectile-ag ivy-height-alist) 15)
      (setf (alist-get 'counsel-projectile-rg ivy-height-alist) 15)
      (setf (alist-get 'swiper ivy-height-alist) 15)
      (setf (alist-get 'counsel-switch-buffer ivy-height-alist) 7))

    (setq ivy-re-builders-alist
	  '((ivy-switch-buffer . ivy--regex-plus)
	    (t . ivy--regex-fuzzy)))

    (use-package counsel
      :demand t
      :bind (("M-x" . counsel-M-x)
	     ("C-x b" . counsel-ibuffer)
	     ("C-x C-f" . counsel-find-file)
	     ;; ("C-M-j" . counsel-switch-buffer)
	     ("C-M-l" . counsel-imenu)
	     :map minibuffer-local-map
	     ("C-r" . 'counsel-minibuffer-history))
      :custom
      (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
      :config
      (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^
  #+end_src
* xah-fly-key
  #+begin_src emacs-lisp
    (use-package xah-fly-keys
      :diminish xah-fly-keys
      :config
      (xah-fly-keys-set-layout "dvorak")
      (define-key xah-fly-n-keymap (kbd "e") 'vterm)
      (xah-fly-keys 1))
  #+end_src
** EXWM
   #+begin_src emacs-lisp
     (use-package exwm
       :config
       (setq exwm-workspace-number 5)
       (add-hook 'exwm-update-class-hook
		 (lambda ()
		   (exwm-workspace-rename-buffer exwm-class-name)))

       (setq exwm-manage-configurations '((t char-mode t)))

       (setq exwm-input-prefix-keys
	     '(?\C-x
	       ?\C-u
	       ?\C-h
	       ?\M-x
	       ?\M-`
	       ?\M-&
	       ?\M-:
	       ?\C-\M-j  ;; Buffer list
	       ?\C-\ ))  ;; Ctrl+Space

       (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

       (setq exwm-input-global-keys
	     `(
	       ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
	       ([?\s-r] . exwm-reset)

	       ;; Move between windows
	       ([s-left] . windmove-left)
	       ([s-right] . windmove-right)
	       ([s-up] . windmove-up)
	       ([s-down] . windmove-down)

	       ;; Launch applications via shell command
	       ([?\s-&] . (lambda (command)
			    (interactive (list (read-shell-command "$ ")))
			    (start-process-shell-command command nil command)))

	       ;; Switch workspace
	       ([?\s-w] . exwm-workspace-switch)
	       ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

	       ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
	       ,@(mapcar (lambda (i)
			   `(,(kbd (format "s-%d" i)) .
			     (lambda ()
			       (interactive)
			       (exwm-workspace-switch-create ,i))))
			 (number-sequence 0 9))))
       (exwm-enable))
   #+end_src
* bash
** bashrc
   #+begin_src conf :tangle ~/.bashrc
     #!/bin/bash
     #
     # ~/.bashrc
     #

     # If not running interactively, don't do anything
     [[ $- != *i* ]] && return

     alias ls='ls --color=auto'
     PS1='[\u@\h \W]\$ '

     # scriptname - description of script

     # Text color variables
     txtund=$(tput sgr 0 1)          # Underline
     txtbld=$(tput bold)             # Bold
     bldred=${txtbld}$(tput setaf 1) #  red
     bldblu=${txtbld}$(tput setaf 4) #  blue
     bldwht=${txtbld}$(tput setaf 7) #  white
     txtrst=$(tput sgr0)             # Reset
     info=${bldwht}*${txtrst}        # Feedback
     pass=${bldblu}*${txtrst}
     warn=${bldred}*${txtrst}
     ques=${bldblu}?${txtrst}

     # my settings
     alias ll='ls -lah'
     alias la='ls -a'
     alias gpgl='gpg --list-secret-keys --keyid-format LONG'
     alias cl='sudo pacman -Rns $(pacman -Qdtq)'
     alias cpu='sudo auto-cpufreq --stats'
     alias te='tar -xvzf'
     # alias sudo='doas'
     # complete -cf doas

     # custom function
     dlweb() {
     wget --recursive --no-clobber --page-requisites --html-extension --convert-links --domains "$1" --no-parent "$2"	 
     }
   #+end_src
** bash_profile
   #+begin_src conf :tangle ~/.bash_profile
     #
     # ~/.bash_profile
     #

     [[ -f ~/.bashrc ]] && . ~/.bashrc

     PATH=$PATH:~/.local/bin

     if [[ -z $DISPLAY ]] && [[ $(tty) = /dev/tty1 ]]; then
     startx
     fi
   #+end_src

** system keymap
*** x11_dvorak
;;#+begin_src conf :tangle ~/.Xmodmap
  keycode 20 = bracketleft braceleft
  keycode 21 = bracketright braceright
  keycode 24 = apostrophe quotedbl
  keycode 25 = comma less
  keycode 26 = period greater
  keycode 27 = p P
  keycode 28 = y Y
  keycode 29 = f F
  keycode 30 = g G
  keycode 31 = c C
  keycode 32 = r R
  keycode 33 = l L
  keycode 34 = slash question
  keycode 35 = equal plus
  keycode 38 = a A
  keycode 39 = o O
  keycode 40 = e E
  keycode 41 = u U
  keycode 42 = i I
  keycode 43 = d D
  keycode 44 = h H
  keycode 45 = t T
  keycode 46 = n N
  keycode 47 = s S
  keycode 48 = minus underscore
  keycode 52 = semicolon colon
  keycode 53 = q Q
  keycode 54 = j J
  keycode 55 = k K
  keycode 56 = x X
  keycode 57 = b B
  keycode 58 = m M
  keycode 59 = w W
  keycode 60 = v V
  keycode 61 = z Z
  clear lock
  keycode 66 = Home NoSymbol Home
;;#+end_src

*** x11_dvorak
#+begin_src conf :tangle ~/.Xmodmap
  clear lock
  keycode 66 = Home NoSymbol Home
#+end_src

** sway
#+begin_src conf :tangle ~/.config/sway/config
  # Default config for sway
  #
  # Copy this to ~/.config/sway/config and edit it to your liking.
  #
  # Read `man 5 sway` for a complete reference.

  ### Variables
  #
  # Logo key. Use Mod1 for Alt.
  set $mod Mod4
  # set $mod Mod1
  # Home row direction keys, like vim
  set $left h
  set $down j
  set $up k
  set $right l
  # Your preferred terminal emulator
  set $term alacritty
  # set $term /home/tendou/.local/bin/st
  # | xargs swaymsg exec
  # Your preferred application launcher
  # Note: pass the final command to swaymsg so that the resulting window can be opened
  # on the original workspace that the command was run on.
  # set $menu dmenu_path | dmenu | xargs swaymsg exec --
  set $menu wofi --show run | xargs swaymsg exec

  ### Output configuration
  #
  # Default wallpaper (more resolutions are available in /usr/share/backgrounds/sway/)
  #output * bg /home/tendou/Pictures/wallpaper/lilia.png fill
  output * bg /home/tendou/Pictures/wallpaper/nordThemeWallpaper.png fill
  #
  # Example configuration:
  #
  #   output HDMI-A-1 resolution 1920x1080 position 1920,0
  #
  # You can get the names of your outputs by running: swaymsg -t get_outputs

  ### Idle configuration
  #
  # Example configuration:
  #
  # exec swayidle -w \
  #          timeout 300 'swaylock -f -c 000000' \
  #          timeout 600 'swaymsg "output * dpms off"' resume 'swaymsg "output * dpms on"' \
  #          before-sleep 'swaylock -f -c 000000'
  #
  # This will lock your screen after 300 seconds of inactivity, then turn off
  # your displays after another 300 seconds, and turn your screens back on when
  # resumed. It will also lock your screen before your computer goes to sleep.

  ### Input configuration
  #
  # Example configuration:
  #
  #   input "2:14:SynPS/2_Synaptics_TouchPad" {
  #       dwt enabled
  #       tap enabled
  #       natural_scroll enabled
  #       middle_emulation enabled
  #   }
  #
  # You can get the names of your inputs by running: swaymsg -t get_inputs
  # Read `man 5 sway-input` for more information about this section.
  # input * {
  #         xkb_layout "us"
  #         xkb_variant "dvorak"
  #     }
  input <identifier> repeat_delay 300
  input <identifier> repeat_rate 50
  ### Key bindings
  #
  # Basics:
  #
  # Start a terminal
  bindsym $mod+Return exec $term

  # start program
  bindsym $mod+b exec brave

  # Kill focused window
  bindsym $mod+Shift+q kill

  # Start your launcher
  bindsym $mod+p exec $menu

  # Start your editor
  bindsym $mod+Shift+Return exec emacs

  # Drag floating windows by holding down $mod and left mouse button.
  # Resize them with right mouse button + $mod.
  # Despite the name, also works for non-floating windows.
  # Change normal to inverse to use left mouse button for resizing and right
  # mouse button for dragging.
  floating_modifier $mod normal

  # Reload the configuration file
  bindsym $mod+Shift+c reload

  # Exit sway (logs you out of your Wayland session)
  bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'
  #
  # Moving around:
  #
  # Move your focus around
  bindsym $mod+$left focus left
  bindsym $mod+$down focus down
  bindsym $mod+$up focus up
  bindsym $mod+$right focus right
  # Or use $mod+[up|down|left|right]
  bindsym $mod+Left focus left
  bindsym $mod+Down focus down
  bindsym $mod+Up focus up
  bindsym $mod+Right focus right

  # Move the focused window with the same, but add Shift
  bindsym $mod+Shift+$left move left
  bindsym $mod+Shift+$down move down
  bindsym $mod+Shift+$up move up
  bindsym $mod+Shift+$right move right
  # Ditto, with arrow keys
  bindsym $mod+Shift+Left move left
  bindsym $mod+Shift+Down move down
  bindsym $mod+Shift+Up move up
  bindsym $mod+Shift+Right move right
  #
  # Workspaces:
  #
  # Switch to workspace
  bindsym $mod+1 workspace number 1
  bindsym $mod+2 workspace number 2
  bindsym $mod+3 workspace number 3
  bindsym $mod+4 workspace number 4
  bindsym $mod+5 workspace number 5
  bindsym $mod+6 workspace number 6
  bindsym $mod+7 workspace number 7
  bindsym $mod+8 workspace number 8
  bindsym $mod+9 workspace number 9
  bindsym $mod+0 workspace number 10
  # Move focused container to workspace
  bindsym $mod+Shift+1 move container to workspace number 1
  bindsym $mod+Shift+2 move container to workspace number 2
  bindsym $mod+Shift+3 move container to workspace number 3
  bindsym $mod+Shift+4 move container to workspace number 4
  bindsym $mod+Shift+5 move container to workspace number 5
  bindsym $mod+Shift+6 move container to workspace number 6
  bindsym $mod+Shift+7 move container to workspace number 7
  bindsym $mod+Shift+8 move container to workspace number 8
  bindsym $mod+Shift+9 move container to workspace number 9
  bindsym $mod+Shift+0 move container to workspace number 10
  # Note: workspaces can have any name you want, not just numbers.
  # We just use 1-10 as the default.
  #
  # Layout stuff:
  #
  # You can "split" the current object of your focus with
  # $mod+b or $mod+v, for horizontal and vertical splits
  # respectively.
  # bindsym $mod+b splith
  bindsym $mod+v splitv

  # Switch the current container between different layout styles
  bindsym $mod+s layout stacking
  bindsym $mod+w layout tabbed
  bindsym $mod+e layout toggle split
  bindsym $mod+tab workspace next

  # Make the current focus fullscreen
  bindsym $mod+f fullscreen

  # Toggle the current focus between tiling and floating mode
  bindsym $mod+Shift+space floating toggle

  # Swap focus between the tiling area and the floating area
  bindsym $mod+space focus mode_toggle

  # Move focus to the parent container
  bindsym $mod+a focus parent
  #
  # Scratchpad:
  #
  # Sway has a "scratchpad", which is a bag of holding for windows.
  # You can send windows there and get them back later.

  # Move the currently focused window to the scratchpad
  bindsym $mod+Shift+minus move scratchpad

  # Show the next scratchpad window or hide the focused scratchpad window.
  # If there are multiple scratchpad windows, this command cycles through them.
  bindsym $mod+minus scratchpad show
  #
  # Resizing containers:
  #
  mode "resize" {
  # left will shrink the containers width
  # right will grow the containers width
  # up will shrink the containers height
  # down will grow the containers height
  bindsym $left resize shrink width 10px
  bindsym $down resize grow height 10px
  bindsym $up resize shrink height 10px
  bindsym $right resize grow width 10px

  # Ditto, with arrow keys
  bindsym Left resize shrink width 10px
  bindsym Down resize grow height 10px
  bindsym Up resize shrink height 10px
  bindsym Right resize grow width 10px

  # Return to default mode
  bindsym Return mode "default"
  bindsym Escape mode "default"
  }
  bindsym $mod+r mode "resize"

  #
  # Status Bar:
  #
  # Read `man 5 sway-bar` for more information about this section.
  bar {
  position top

  # When the status_command prints a new line to stdout, swaybar updates.
  # The default just shows the current date and time.
  # status_command while date +'%Y-%m-%d %I:%M:%S %p'; do sleep 1; done
  status_command while date +'%Y-%m-%d %H:%M'; do sleep 60; done
  icon_theme "Adwaita"

  colors {
  statusline #ffffff
  background #2e3440
  inactive_workspace #2e3440 #2e3440 #5c5c5c
  }
  }

  # User config
  exec xset s off
  exec xset -dpms
  exec autotiling-rs
  exec unclutter
  exec fcitx5
  # exec pcloudcc -u akiyamamio_miku@hotmail.co.jp -d
  exec pcloud
  # exec /home/tendou/.local/bin/st
  exec emacs
  exec 1password
  default_border none

  # User keybind
  bindsym XF86AudioRaiseVolume exec pactl set-sink-volume @DEFAULT_SINK@ +5%
  bindsym XF86AudioLowerVolume exec pactl set-sink-volume @DEFAULT_SINK@ -5%
  bindsym XF86AudioMute exec pactl set-sink-mute @DEFAULT_SINK@ toggle
  bindsym XF86AudioMicMute exec pactl set-source-mute @DEFAULT_SOURCE@ toggle
  bindsym XF86MonBrightnessDown exec brightnessctl set 5%-
  bindsym XF86MonBrightnessUp exec brightnessctl set 5%+
  bindsym XF86AudioPlay exec playerctl play-pause
  bindsym XF86AudioNext exec playerctl next
  bindsym XF86AudioPrev exec playerctl previous

  include /etc/sway/config.d/*
#+end_src

* ZSH
** zsh
#+begin_src conf :tangle ~/.config/zsh/.zshrc
  export PATH=$PATH:/home/tendou/.local/bin

  # zsh config
  for f in /home/tendou/.config/zsh/.shellConfig/*; do source "$f"; done

  # Enable colors and change prompt:
  autoload -U colors && colors # Load colors
  autoload -Uz vcs_info
  precmd_vcs_info() { vcs_info }
  precmd_functions+=( precmd_vcs_info )
  setopt prompt_subst
  RPROMPT=\$vcs_info_msg_0_
  zstyle ':vcs_info:git:*' formats 'on branch %b'
  PROMPT='%B%F{yellow}%2~ %b%B%F{white}${vcs_info_msg_0_}%B%F{gray}%(!.#h.>) '
  # PROMPT=\$vcs_info_msg_0_'%# '

  # Disable ctrl-s to freeze terminal.
  stty stop undef

  # Lines configured by zsh-newuser-install
  HISTFILE=/home/tendou/.config/.histfile
  HISTSIZE=50000
  SAVEHIST=50000
  bindkey -v

  # The following lines were added by compinstall
  zstyle :compinstall filename '/home/tendou/.config/zsh/.zshrc'

  autoload -Uz compinit && compinit
  # End of lines added by compinstall

  # User config
  # . /usr/share/LS_COLORS/dircolors.sh

  # Syntax highlight plugin put at the end
  source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

  # Just a backup solution for prompt color
  # PS1="%B%{$fg[red]%}[%{$fg[yellow]%}%n%{$fg[green]%}@%{$fg[blue]%}%M %{$fg[magenta]%}%1~%{$fg[red]%}]%{$reset_color%}$%b "

  # Reference fomr "https://scriptingosx.com/2019/07/moving-to-zsh-06-customizing-the-zsh-prompt/"
  # PROMPT="%B%F{yellow}%2~%f%b %(!.#h.> )"
  # RPROMPT="%F{white}[%*]"

  # Don't want the auto cd anymore but put it here in cast I want it back
  # setopt autocd  # Automatically cd into typed directory.

  # vterm config
  vterm_printf(){
  if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ] ); then
  # Tell tmux to pass the escape sequences through
  printf "\ePtmux;\e\e]%s\007\e\\" "$1"
  elif [ "${TERM%%-*}" = "screen" ]; then
  # GNU screen (screen, screen-256color, screen-256color-bce)
  printf "\eP\e]%s\007\e\\" "$1"
  else
  printf "\e]%s\e\\" "$1"
  fi
  }
#+end_src

** zsh alias
#+begin_src conf :tangle ~/.config/zsh/.shellConfig/aliases
  # Alias
  alias ls='ls -CF --color=auto'
  alias la='ls -A'
  alias ll='ls -alF'
  alias suspend='sudo systemctl suspend'
  alias gs='git status'
  alias grep='grep --color=auto'
  alias rm='rm -i'
  alias mv='mv -i'
  alias tmux='tmux -u'
  # alias ll='ls -lah'
  # alias la='ls -a'
  alias gpgl='gpg --list-secret-keys --keyid-format LONG'
  alias cl='sudo pacman -Rns $(pacman -Qdtq)'
  alias cpu='sudo auto-cpufreq --stats'
  alias te='tar -xvzf'
  alias install_grub='sudo grub-install --target=x86_64-efi --efi-directory=uefi --bootloader-id=grub'

  co() {
  gcc "$1" -o ../Debug/"$2"
  }

  dlweb() {
  wget --recursive --no-clobber --page-requisites --html-extension --convert-links --domains "$1" --no-parent "$2"	 
  }
#+end_src

** zsh profile
#+begin_src conf :tangle ~/.config/zsh/.zprofile
  export PATH=$PATH"$HOME/.local/bin"
  export PATH="$HOME/.cargo/bin:$PATH"
  # export VISUAL="emacsclient -c -a emacs" # $VISUAL opens in GUI mode
  export VISUAL=emacs
  export EDITOR="$VISUAL"
  export HISTCONTROL=ignoreboth
  export LESS_TERMCAP_mb=$'\e[1;32m'
  export LESS_TERMCAP_md=$'\e[1;32m'
  export LESS_TERMCAP_me=$'\e[0m'
  export LESS_TERMCAP_se=$'\e[0m'
  export LESS_TERMCAP_so=$'\e[01;33m'
  export LESS_TERMCAP_ue=$'\e[0m'
  export LESS_TERMCAP_us=$'\e[1;4;31m'
  # eval "$(gh completion -s zsh)"
  if [ -z "${DISPLAY}" ] && [ "${XDG_VTNR}" -eq 1 ]; then
  exec Hyprland
  fi
#+end_src


** Hyprland
#+begin_src conf :tangle ~/.config/hypr/hyprland.conf

  ########################################################################################
  AUTOGENERATED HYPR CONFIG.
  PLEASE USE THE CONFIG PROVIDED IN THE GIT REPO /examples/hypr.conf AND EDIT IT,
  OR EDIT THIS ONE ACCORDING TO THE WIKI INSTRUCTIONS.
  ########################################################################################

  #
  # Please note not all available settings / options are set here.
  # For a full list, see the wiki
  #

  # See https://wiki.hyprland.org/Configuring/Monitors/
  monitor=eDP-1,1920x1080@144,0x0,1


  # See https://wiki.hyprland.org/Configuring/Keywords/    for more

  # Execute your favorite apps at launch
  # exec-once = waybar & hyprpaper & firefox
  # exec-once = swaybg -i /home/tendou/pic/wallpaper/mesubuta.png
  exec-once = hyprpaper & alacritty & 1password & pcloud

  # Source a file (multi-file configs)
  # source = ~/.config/hypr/myColors.conf

  # Some default env vars.
  env = XCURSOR_SIZE,24

  # For all categories, see https://wiki.hyprland.org/Configuring/Variables/
  input {
      kb_layout = us
      kb_variant = 
      kb_model =
      kb_options =
      kb_rules =

      follow_mouse = 1

      touchpad {
          natural_scroll = no
      }

      sensitivity = 0 # -1.0 - 1.0, 0 means no modification.
  }

  general {
      # See https://wiki.hyprland.org/Configuring/Variables/ for more

      gaps_in = 5
      gaps_out = 10
      border_size = 2
      col.active_border = rgba(33ccffee) rgba(00ff99ee) 45deg
      col.inactive_border = rgba(595959aa)

      layout = dwindle
  }

  decoration {
      # See https://wiki.hyprland.org/Configuring/Variables/ for more

      rounding = 10
      blur = yes
      blur_size = 3
      blur_passes = 1
      blur_new_optimizations = on

      drop_shadow = yes
      shadow_range = 4
      shadow_render_power = 3
      col.shadow = rgba(1a1a1aee)
  }

  animations {
      enabled = yes

      # Some default animations, see https://wiki.hyprland.org/Configuring/Animations/ for more

      bezier = myBezier, 0.05, 0.9, 0.1, 1.05

      animation = windows, 1, 7, myBezier
      animation = windowsOut, 1, 7, default, popin 80%
      animation = border, 1, 10, default
      animation = borderangle, 1, 8, default
      animation = fade, 1, 7, default
      animation = workspaces, 1, 6, default
  }

  dwindle {
      # See https://wiki.hyprland.org/Configuring/Dwindle-Layout/ for more
      pseudotile = yes # master switch for pseudotiling. Enabling is bound to mainMod + P in the keybinds section below
      preserve_split = yes # you probably want this
  }

  master {
      # See https://wiki.hyprland.org/Configuring/Master-Layout/ for more
      new_is_master = true
  }

  gestures {
      # See https://wiki.hyprland.org/Configuring/Variables/ for more
      workspace_swipe = off
  }

  # Example per-device config
  # See https://wiki.hyprland.org/Configuring/Keywords/#executing for more
  device:epic-mouse-v1 {
      sensitivity = -0.5
  }

  # Example windowrule v1
  # windowrule = float, ^(kitty)$
  # Example windowrule v2
  # windowrulev2 = float,class:^(kitty)$,title:^(kitty)$
  # See https://wiki.hyprland.org/Configuring/Window-Rules/ for more

  # See https://wiki.hyprland.org/Configuring/Keywords/ for more
  $mainMod = SUPER

  # Example binds, see https://wiki.hyprland.org/Configuring/Binds/ for more
  # bind = $mainMod, Q, exec, kitty
  bind = $mainMod, Q, exec, alacritty
  bind = $mainMod SHIFT, Q, killactive, 
  bind = $mainMod SHIFT, C, exit, 
  bind = $mainMod, E, exec, dolphin
  bind = $mainMod, V, togglefloating, 
  bind = $mainMod, R, exec, wofi --show drun
  bind = $mainMod, P, pseudo, # dwindle
  bind = $mainMod, J, togglesplit, # dwindle

  #-Move-focus-with-mainMod-+-vim-keys
  bind = $mainMod, h, movefocus, l
  bind = $mainMod, l, movefocus, r
  bind = $mainMod, j, movefocus, u
  bind = $mainMod, k, movefocus, d

  #-Move-focus-with-mainMod-+-arrow-keys
  # bind = $mainMod, left, movefocus, l
  # bind = $mainMod, right, movefocus, r
  # bind = $mainMod, up, movefocus, u
  # bind = $mainMod, down, movefocus, d

  # Switch workspaces with mainMod + [0-9]
  bind = $mainMod, 1, workspace, 1
  bind = $mainMod, 2, workspace, 2
  bind = $mainMod, 3, workspace, 3
  bind = $mainMod, 4, workspace, 4
  bind = $mainMod, 5, workspace, 5
  bind = $mainMod, 6, workspace, 6
  bind = $mainMod, 7, workspace, 7
  bind = $mainMod, 8, workspace, 8
  bind = $mainMod, 9, workspace, 9
  bind = $mainMod, 0, workspace, 10

  # Move active window to a workspace with mainMod + SHIFT + [0-9]
  bind = $mainMod SHIFT, 1, movetoworkspace, 1
  bind = $mainMod SHIFT, 2, movetoworkspace, 2
  bind = $mainMod SHIFT, 3, movetoworkspace, 3
  bind = $mainMod SHIFT, 4, movetoworkspace, 4
  bind = $mainMod SHIFT, 5, movetoworkspace, 5
  bind = $mainMod SHIFT, 6, movetoworkspace, 6
  bind = $mainMod SHIFT, 7, movetoworkspace, 7
  bind = $mainMod SHIFT, 8, movetoworkspace, 8
  bind = $mainMod SHIFT, 9, movetoworkspace, 9
  bind = $mainMod SHIFT, 0, movetoworkspace, 10

  # Scroll through existing workspaces with mainMod + scroll
  bind = $mainMod, mouse_down, workspace, e+1
  bind = $mainMod, mouse_up, workspace, e-1

  # Move workspace
  bind = $mainMod, Tab, workspace, e+1

  # Move/resize windows with mainMod + LMB/RMB and dragging
  bindm = $mainMod, mouse:272, movewindow
  bindm = $mainMod, mouse:273, resizewindow

  # Example volume button that allows press and hold
  binde=, XF86AudioRaiseVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+
  binde=, XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-
  binde=, XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
  binde=, XF86AudioMicMute, exec, wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle
  binde=, XF86MonBrightnessUp, exec, brightnessctl set 5%+
  binde=, XF86MonBrightnessDown, exec, brightnessctl set 5%-
  binde=, XF86AudioPlay, exec, playerctl play
  binde=, XF86AudioStop, exec, playerctl pause
  binde=, XF86AudioNext, exec, playerctl next
  binde=, XF86AudioPrev, exec, playerctl previous

  # Switch off display
  bind = $mainMod, s, exec, hyprctl dispatch dpms off
  bind = $mainMod SHIFT, s, exec, hyprctl dispatch dpms on
#+end_src
** hyprpaper
#+begin_src conf :tangle ~/.config/hypr/hyprpaper.conf
  preload = /home/tendou/pic/wallpaper/nordThemeWallpaper.png
  preload = /home/tendou/pic/wallpaper/ROG Strix 2019_1920x1080.png
  preload = /home/tendou/pic/2021-04-15 18-04-51.png
  preload = /home/tendou/pic/tooru.png
  #if more than one preload is desired then continue to preload other backgrounds
  # preload = /path/to/next_image.png
  # .. more preloads

  #set the default wallpaper(s) seen on inital workspace(s) --depending on the number of monitors used
  # wallpaper = eDP-1,/home/tendou/pic/wallpaper/nordThemeWallpaper.png
  # wallpaper = eDP-1,/home/tendou/pic/wallpaper/ROG Strix 2019_1920x1080.png
  wallpaper = eDP-1,/home/tendou/pic/2021-04-15 18-04-51.png
  # wallpaper = eDP-1,/home/tendou/Pictures/tooru.png
  #if more than one monitor in use, can load a 2nd image
  # wallpaper = monitor2,/path/to/next_image.png
  # .. more monitors
  #+end_src

** wofi
*** basic
#+begin_src conf :tangle ~/.config/wofi/config
  show=drun
  height=600
  width=300
  term=alacritty
  image_size=24
  insensitive=true
  allow_images=true
  allow_markup=true
  no_actions=true
#+end_src

*** style
#+begin_src css :tangle ~/.config/wofi/style.css
  @define-color red_color #cc241d;
  @define-color red2_color #fb4934;
  @define-color green_color #98971a;
  @define-color green2_color #d8bb26;
  @define-color yellow_color #d79921;
  @define-color yellow2_color #fabd2f;
  @define-color blue_color #458588;
  @define-color blue2_color #83a598;
  @define-color purple_color #b16286;
  @define-color purple2_color #d3869b;
  @define-color aqua_color #689d6a;
  @define-color aqua2_color #8ec07c;
  @define-color gray_color #a89984;
  @define-color gray2_color #928374;
  @define-color orange_color #d65d0e;
  @define-color orange2_color #fe8019;

  @define-color bg0_color #282828;
  @define-color bg1_color #3c3836;
  @define-color bg2_color #504945;
  @define-color bg3_color #665c54;
  @define-color bg4_color #7c6f64;
  @define-color bg0_h_color #1d2021;

  @define-color fg_color #ebdbb2;

  window {
    margin: 2px;
    border: 2px solid @blue_color;
    background-color: @blue_color;
  }

  #input {
    margin: 2px;
    border: 2px solid @bg4_color;
    background-color: @bg0_color;
  }

  #inner-box {
    margin: 2px;
    background-color: @bg0_color;
  }

  #outer-box {
    margin: 2px;
    border: 2px solid @bg0_h_color;
    background-color: @bg0_h_color;
  }

  .entry image {
    margin-right: 10px;
  }

  #scroll {
    margin: 2px;
  }

  #text {
    color: @fg_color;
  } 
#+end_src

<<<<<<< HEAD
* relative line number
#+begin_src conf
  (defvar my-linum-current-line-number 0)

  (setq linum-format 'my-linum-relative-line-numbers)

  (defun my-linum-relative-line-numbers (line-number)
    (let ((test2 (- line-number my-linum-current-line-number)))
      (propertize
       (number-to-string (cond ((<= test2 0) (* -1 test2))
			       ((> test2 0) test2)))
       'face 'linum)))

  (defadvice linum-update (around my-linum-update)
    (let ((my-linum-current-line-number (line-number-at-pos)))
      ad-do-it))
  (ad-activate 'linum-update)

  (global-linum-mode t)
* evil
#+begin_src conf
  (defun dw/evil-hook ()
    (dolist (mode '(custom-mode
		    eshell-mode
		    git-rebase-mode
		    erc-mode
		    circe-server-mode
		    circe-chat-mode
		    circe-query-mode
		    sauron-mode
		    term-mode))
    (add-to-list 'evil-emacs-state-modes mode)))

  (defun dw/dont-arrow-me-bro ()
    (interactive)
    (message "Arrow keys are bad, you know?"))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-respect-visual-line-mode t)
    :config
    (add-hook 'evil-mode-hook 'dw/evil-hook)
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (define-key evil-normal-state-map (kbd "<left>") 'dw/dont-arrow-me-bro)
    (define-key evil-normal-state-map (kbd "<right>") 'dw/dont-arrow-me-bro)
    (define-key evil-normal-state-map (kbd "<down>") 'dw/dont-arrow-me-bro)
    (define-key evil-normal-state-map (kbd "<up>") 'dw/dont-arrow-me-bro)
    (evil-global-set-key 'motion (kbd "<left>") 'dw/dont-arrow-me-bro)
    (evil-global-set-key 'motion (kbd "<right>") 'dw/dont-arrow-me-bro)
    (evil-global-set-key 'motion (kbd "<down>") 'dw/dont-arrow-me-bro)
    (evil-global-set-key 'motion (kbd "<up>") 'dw/dont-arrow-me-bro)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :init
    (setq evil-collection-company-use-tng nil)  ;; Is this a bug in evil-collection?
    :custom
    (evil-collection-outline-bind-tab-p nil)
    :config
    (setq evil-collection-mode-list
	  (remove 'lispy evil-collection-mode-list))
    (evil-collection-init))
#+end_src

** alacritty_gruvbox
#+begin_src yaml :tangle ~/.config/alacritty/alacritty.yml :mkdirp yes
  env:
    WINIT_X11_SCALE_FACTOR: "1"
    TERM: xterm-256color

    # Theme configuration
    # Copyright (c) 2016-present Sven Greb
    # <development@svengreb.de>
    # This source code is licensed under the MIT license found in the license file.

  # Colors (Gruvbox Material Dark Medium)
  colors:
    primary:
      background: '0x282828'
      foreground: '0xdfbf8e'

    normal:
      black:   '0x665c54'
      red:     '0xea6962'
      green:   '0xa9b665'
      yellow:  '0xe78a4e'
      blue:    '0x7daea3'
      magenta: '0xd3869b'
      cyan:    '0x89b482'
      white:   '0xdfbf8e'

    bright:
      black:   '0x928374'
      red:     '0xea6962'
      green:   '0xa9b665'
      yellow:  '0xe3a84e'
      blue:    '0x7daea3'
      magenta: '0xd3869b'
      cyan:    '0x89b482'
      white:   '0xdfbf8e'

  # Font configuration
  font:
    normal:
      family: Victor Mono
      style: Regular

    bold:
      family: Victor Mono
      style: Bold

    italic:
      family: Victor Mono
      style: Italic

    bold_italic:
      family: Victor Mono
      style: Bold Italic

    # Point size
    size: 14.0

#+end_src

* jamstacker
#+begin_src :yaml
  # Themer Jamstacker

  schemes:
    themer-jamstacker-dark: &dark
      primary:
	background: "#1C1D1F"
	foreground: "#DFDFDF"
      cursor:
	text: "#1C1D1F"
	cursor: "#C490FF"
      selection:
	text: "#1C1D1F"
	background: "#FFFFFF"
      normal:
	black: "#5D5E5F"
	red: "#F1729E"
	green: "#DCFF00"
	yellow: "#B6795B"
	blue: "#FFFFFF"
	magenta: "#6669B2"
	cyan: "#5CFFE3"
	white: "#DFDFDF"
      bright:
	black: "#7D7E7F"
	red: "#F48EB1"
	green: "#E3FF33"
	yellow: "#C5947C"
	blue: "#FFFFFF"
	magenta: "#8587C1"
	cyan: "#7DFFE9"
	white: "#FFFFFF"
      dim:
	black: "#3C3D3F"
	red: "#C66185"
	green: "#B6D206"
	yellow: "#97674F"
	blue: "#D2D2D2"
	magenta: "#575A95"
	cyan: "#4FD2BC"
	white: "#BEBEBF"
#+end_src

** alacritty
#+begin_src yaml :tangle C:/Users/tendou/AppData/Roaming/alacritty/alacritty.yml :mkdirp yes
  env:
    WINIT_X11_SCALE_FACTOR: "1"
    TERM: xterm-256color

  window:
    startup_mode: Maximized

  shell:
    program: pwsh
    args:
      - -NoExit

  # Colors (Solarized Dark)
  colors:
    # Default colors
    primary:
      background: '0x002b36'
      foreground: '0x839496'

    # Normal colors
    normal:
      black:   '0x073642'
      red:     '0xdc322f'
      green:   '0x859900'
      yellow:  '0xb58900'
      blue:    '0x268bd2'
      magenta: '0xd33682'
      cyan:    '0x2aa198'
      white:   '0xeee8d5'

    # Bright colors
    bright:
      black:   '0x002b36'
      red:     '0xcb4b16'
      green:   '0x586e75'
      yellow:  '0x657b83'
      blue:    '0x839496'
      magenta: '0x6c71c4'
      cyan:    '0x93a1a1'
      white:   '0xfdf6e3'
    
  # Font configurationfont:
  font:
    normal:
      family: Victor Mono
      style: Regular

    bold:
      family: Victor Mono
      style: Bold

    italic:
      family: Victor Mono
      style: Italic

    bold_italic:
      family: Victor Mono
      style: Bold Italic

    # Point size
    size: 14

#+end_src
