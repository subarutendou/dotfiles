* opacity
  #+begin_src emacs-lisp
    (set-frame-parameter (selected-frame) 'alpha '(85 . 50))
    (add-to-list 'default-frame-alist '(alpha . (85 . 50)))

    (defun toggle-transparency ()
       (interactive)
       (let ((alpha (frame-parameter nil 'alpha)))
         (set-frame-parameter
          nil 'alpha
          (if (eql (cond ((numberp alpha) alpha)
                         ((numberp (cdr alpha)) (cdr alpha))
                         ;; Also handle undocumented (<active> <inactive>) form.
                         ((numberp (cadr alpha)) (cadr alpha)))
                   100)
              '(85 . 50) '(100 . 100)))))
    (global-set-key (kbd "C-c t") 'toggle-transparency)
  #+end_src
* Theme setting
  #+begin_src emacs-lisp
    ;; Use `nord4` from Nord's "Snow Storm" palette as background color.
    (setq nord-region-highlight "frost")
    (setq nord-region-highlight "snowstorm")

  #+end_src
* early-init
** Check startup time
   #+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
     ;; The default is 800 kilobytes.  Measured in bytes.
     (setq gc-cons-threshold (* 50 1000 1000))

     ;; Profile emacs startup
     (add-hook 'emacs-startup-hook
               (lambda ()
                 (message "*** Emacs loaded in %s with %d garbage collections."
                          (format "%.2f seconds"
                                  (float-time
                                   (time-subtract after-init-time before-init-time)))
                          gcs-done)))
   #+end_src
* Normal emacs
#+begin_src emacs-lisp
  (setq xah-fly-use-meta-key nil)
  (electric-pair-mode 1)
  (use-package diminish)
  (use-package guix)
  (use-package all-the-icons)
  (use-package all-the-icons-dired)
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

  (use-package doom-modeline
    :hook (after-init . doom-modeline-init)
    :custom-face
    (mode-line ((t (:height 0.85))))
    (mode-line-inactive ((t (:height 0.85))))
    :custom
    (doom-modeline-height 15)
    (doom-modeline-bar-width 6)
    (doom-modeline-lsp t)
    (doom-modeline-github nil)
    (doom-modeline-mu4e nil)
    (doom-modeline-irc t)
    (doom-modeline-minor-modes t)
    (doom-modeline-persp-name nil)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-major-mode-icon nil))

  (use-package emojify
    :hook (after-init . global-emojify-mode))

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package which-key
    :diminish which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

  (use-package ligature
    :load-path "~/.emacs.d/github/ligature.el/"
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                         ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                         "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                         "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                         "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                         "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                         "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                         "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                         ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                         "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                         "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                         "?=" "?." "??" ";;" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                         "\\\\" "://"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))

  (use-package consult
    :hook (completion-list-mode . consult-preview-at-point-mode))

  (use-package perspective
    :demand t
    :bind (("C-M-k" . persp-switch)
           ("C-M-n" . persp-next)
           ("C-x k" . persp-kill-buffer*))
    :custom
    (persp-initial-frame-name "Main")
    :config
    ;; Running `persp-mode' multiple times resets the perspective list...
    (unless (equal persp-mode t)
      (persp-mode)))
#+end_src
* settings
  #+begin_src emacs-lisp
    (define-key xah-fly-command-map (kbd "b") 'swiper)
  #+end_src
** bash
   #+begin_src conf
     export PATH=$HOME/.local/bin:$PATH
     export EDITOR='emacsclient -c'
     export VISUAL='emacsclient -c'
   #+end_src
** xinintrc
   #+begin_src conf
     export DefaultIMModule=fcitx
     export GTK_IM_MODULE=fcitx
     export QT_IM_MODULE=fcitx
     export XMODIFIERS=@im=fcitx
     fcitx5 &
   #+end_src
* vertico
  #+begin_src emacs-lisp
    (use-package vertico
      :init
      (vertico-mode))

    (use-package orderless
      :init
      (setq completion-styless '(orderless)
            completion-category-defaults nil
            completion-cotegory-overrides '((file (styles partial-completion)))))

    (savehist-mode 1)

    (defun crm-indicator (arg)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'comleting-read-multiple :filter-args #'crm-indicator)

    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'monobuffer-setup-hook #'cursor-intangible-mode)

    (setq enable-recursive-minibuffers t)
  #+end_src
* package
  #+begin_src emacs-lisp
    (use-package emojify
      :hook (after-init . global-emojify-mode))
  #+end_src
* ivy
  #+begin_src emacs-lisp
    (use-package counsel)

    (use-package ivy
      :diminish ivy-mode
      :init
      (ivy-mode 1))

    (setq ivy-re-builders-alist
          '((ivy-switch-buffer . ivy--regex-plus)
            (t . ivy--regex-fuzzy)))
    (setq ivy-initial-inputs-alist nil)

    (use-package ivy-rich
      :init
      (ivy-rich-mode 1))

    (use-package helpful
      :custom
      (counsel-describe-function-function #'helpful-callable)
      (counsel-describe-variable-function #'helpful-variable)
      :bind
      ([remap describe-function] . counsel-describe-function)
      ([remap describe-command] . helpful-command)
      ([remap describe-variable] . counsel-describe-variable)
      ([remap describe-key] . helpful-key))
  #+end_src
* xah-fly-key
  #+begin_src emacs-lisp
    (use-package xah-fly-keys
      :diminish xah-fly-keys
      :config
      (xah-fly-keys-set-layout "dvorak")
      (define-key xah-fly-n-keymap (kbd "e") 'vterm)
      (xah-fly-keys 1))
  #+end_src
** EXWM
   #+begin_src emacs-lisp
     (use-package exwm
       :config
       (setq exwm-workspace-number 5)
       (add-hook 'exwm-update-class-hook
		 (lambda ()
		   (exwm-workspace-rename-buffer exwm-class-name)))

       (setq exwm-manage-configurations '((t char-mode t)))

       (setq exwm-input-prefix-keys
	     '(?\C-x
	       ?\C-u
	       ?\C-h
	       ?\M-x
	       ?\M-`
	       ?\M-&
	       ?\M-:
	       ?\C-\M-j  ;; Buffer list
	       ?\C-\ ))  ;; Ctrl+Space

       (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

       (setq exwm-input-global-keys
	     `(
	       ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
	       ([?\s-r] . exwm-reset)

	       ;; Move between windows
	       ([s-left] . windmove-left)
	       ([s-right] . windmove-right)
	       ([s-up] . windmove-up)
	       ([s-down] . windmove-down)

	       ;; Launch applications via shell command
	       ([?\s-&] . (lambda (command)
			    (interactive (list (read-shell-command "$ ")))
			    (start-process-shell-command command nil command)))

	       ;; Switch workspace
	       ([?\s-w] . exwm-workspace-switch)
	       ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

	       ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
	       ,@(mapcar (lambda (i)
			   `(,(kbd (format "s-%d" i)) .
			     (lambda ()
			       (interactive)
			       (exwm-workspace-switch-create ,i))))
			 (number-sequence 0 9))))
       (exwm-enable))
   #+end_src
* bash
** bashrc
   #+begin_src conf :tangle ~/.bashrc
     #!/bin/bash
     #
     # ~/.bashrc
     #

     # If not running interactively, don't do anything
     [[ $- != *i* ]] && return

     alias ls='ls --color=auto'
     PS1='[\u@\h \W]\$ '

     # scriptname - description of script

     # Text color variables
     txtund=$(tput sgr 0 1)          # Underline
     txtbld=$(tput bold)             # Bold
     bldred=${txtbld}$(tput setaf 1) #  red
     bldblu=${txtbld}$(tput setaf 4) #  blue
     bldwht=${txtbld}$(tput setaf 7) #  white
     txtrst=$(tput sgr0)             # Reset
     info=${bldwht}*${txtrst}        # Feedback
     pass=${bldblu}*${txtrst}
     warn=${bldred}*${txtrst}
     ques=${bldblu}?${txtrst}

     # my settings
     alias ll='ls -lah'
     alias la='ls -a'
     alias gpgl='gpg --list-secret-keys --keyid-format LONG'
     alias cl='sudo pacman -Rns $(pacman -Qdtq)'
     alias cpu='sudo auto-cpufreq --stats'
     alias te='tar -xvzf'
     # alias sudo='doas'
     # complete -cf doas

     # custom function
     dlweb() {
     wget --recursive --no-clobber --page-requisites --html-extension --convert-links --domains "$1" --no-parent "$2"	 
     }
   #+end_src
** bash_profile
   #+begin_src conf :tangle ~/.bash_profile
     #
     # ~/.bash_profile
     #

     [[ -f ~/.bashrc ]] && . ~/.bashrc

     PATH=$PATH:~/.local/bin

     if [[ -z $DISPLAY ]] && [[ $(tty) = /dev/tty1 ]]; then
     startx
     fi
   #+end_src
