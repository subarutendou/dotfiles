#+title Emacs settings
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

* Early Settings
** Minimum UI
#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
  (setq inhibit-startup-message t)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (setq visible-bell t)
  (setq use-dialog-box nil)
  (setq initial-scratch-message nil)
  (show-paren-mode 1)              ; Highlight parenthesis
  (setq-default x-select-enable-primary t) ; use primary as clipboard in emacs
  ;; avoid leaving a gap between the frame and the screen
  (setq-default frame-resize-pixelwise t)
#+end_src

** Basic
#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq native-comp-async-report-warnings-errors nil)
  (column-number-mode 1)
  (when (version<= "26.0.50" emacs-version )
    (global-display-line-numbers-mode))
  (defvar file-name-handler-alist-old file-name-handler-alist)

  (setq file-name-handler-alist nil
        gc-cons-threshold most-positive-fixnum)
  ;; Lower threshold to speed up garbage collection
  (add-hook 'after-init-hook
            `(lambda ()
               (setq file-name-handler-alist file-name-handler-alist-old)
               (setq gc-cons-threshold (* 2 1000 1000)))
            t)

  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  vterm-mode-hook
                  pdf-view-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (set-face-attribute 'default nil :family "MonoLisa" :height 137)
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "chromium-browser")
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
  (setq ido-use-filename-at-point 'guess)
  (when (fboundp 'electric-pair-mode)
    (electric-pair-mode t))
#+end_src

** Backup
#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
  (setq vc-make-backup-files t)

  (setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
   '(("." . ".saves"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups
#+end_src

* Basic Settings
** Prerequest for package manager
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
  (use-package quelpa-use-package)
#+end_src

** Basic config that need to load after emacs launch
#+begin_src emacs-lisp
  (setq-default tab-width 4)
  (setq tab-width 4) ; or any other preferred value
  (defvaralias 'c-basic-offset 'tab-width)
  (defvaralias 'cperl-indent-level 'tab-width)

  (blink-cursor-mode 0)
  (progn
    (setq-default indent-tabs-mode nil))
  (setq xah-fly-use-meta-key nil)
  (global-set-key (kbd "C-x w") 'elfeed)
#+end_src

** Theme
#+begin_src emacs-lisp
  ;; (use-package nord-theme
    ;; :config
    ;; (load-theme 'nord t))

  (use-package gruvbox-theme
    :config
    (load-theme 'gruvbox t))
#+end_src

** Package
*** Intergrate
#+begin_src emacs-lisp
  (blink-cursor-mode 0)
  (use-package tree-sitter
    :diminish tree-sitter-mode
    :config
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
  (use-package tree-sitter-langs)
  (use-package vterm)
  (use-package multi-vterm)
  (use-package diminish)
  (use-package flx)
  (use-package lua-mode)
  (use-package python-mode)
  (use-package zig-mode)
  (use-package rust-mode)
  (use-package yaml-mode)
  (use-package csharp-mode)
  (use-package swift-mode)
  (use-package ca65-mode)
  (use-package lua-mode)
  (use-package json-mode)
  (use-package auto-complete
    :diminish auto-complete-mode
    :config
    (ac-config-default))
  (add-to-list 'load-path "/home/tendou/.opam/default/share/emacs/site-lisp")
       (require 'ocp-indent)
#+end_src

*** ivy
#+begin_src emacs-lisp
  (use-package counsel)
  (use-package ivy
    :diminish ivy-mode
    :init
    (ivy-mode 1)
    :config
    (setq ivy-use-selectable-prompt t))

  (setq ivy-re-builders-alist
        '((ivy-switch-buffer . ivy--regex-plus)
          (t . ivy--regex-fuzzy)))
  (setq ivy-initial-inputs-alist nil)

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  (setq ivy-use-virtual-buffers t)

  (use-package swiper
    :config
    (setq ivy-re-builders-alist
          '((swiper . ivy--regex-plus)
            (t . ivy--regex-fuzzy))))

  (setq enable-recursive-minibuffers t)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)

  (use-package which-key
    :diminish which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src

#+begin_src emacs-lisp
  (use-package ligature
    :load-path "path-to-ligature-repo"
    :config
    (ligature-set-ligatures 'prog-mode '("-->" "->" "->>" "-<" "--<"
					 "-~" "]#" ".-" "!=" "!=="
					 "#(" "#{" "#[" "#_" "#_("
					 "/=" "/==" "|||" "||" ;; "|"
					 "==" "===" "==>" "=>" "=>>"
					 "=<<" "=/" ">-" ">->" ">="
					 ">=>" "<-" "<--" "<->" "<-<"
					 "<!--" "<|" "<||" "<|||"
					 "<|>" "<=" "<==" "<==>" "<=>"
					 "<=<" "<<-" "<<=" "<~" "<~>"
					 "<~~" "~-" "~@" "~=" "~>"
					 "~~" "~~>" ".=" "..=" "---"
					 "{|" "[|" ".."  "..."  "..<"
					 ".?"  "::" ":::" "::=" ":="
					 ":>" ":<" ";;" "!!"  "!!."
					 "!!!"  "?."  "?:" "??"  "?="
					 "**" "***" "*>" "*/" "#:"
					 "#!"  "#?"  "##" "###" "####"
					 "#=" "/*" "/>" "//" "///"
					 "&&" "|}" "|]" "$>" "++"
					 "+++" "+>" "=:=" "=!=" ">:"
					 ">>" ">>>" "<:" "<*" "<*>"
					 "<$" "<$>" "<+" "<+>" "<>"
					 "<<" "<<<" "</" "</>" "^="
					 "%%" "'''" "\"\"\"" ))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src

** Org settings
#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-agenda-start-with-log-mode t)
    (org-log-done 'time)
    (org-log-into-drawer t))
  ;; (org-agenda-files
  ;;  '("~/orgfile/Tasks.org")		; example
  ;;  '("~/orgfile/birthday.org")))

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1))))

  ;; Make sure org-indent face is available
  (require 'org-indent)
  (require 'org-tempo)
  (setq org-structure-template-alist
        '(("py" . "python")
          ("el" . "src emacs-lisp")
          ("rs" . "rust")
          ("a" . "export ascii\n")
          ("c" . "center\n")
          ("C" . "comment\n")
          ("e" . "example\n")
          ("E" . "export")
          ("h" . "export html\n")
          ("l" . "export latex\n")
          ("q" . "quote\n")
          ("s" . "src")
          ("v" . "verse\n")))
  (progn
    ;; no need to warn
    (put 'narrow-to-region 'disabled nil)
    (put 'narrow-to-page 'disabled nil)
    (put 'upcase-region 'disabled nil)
    (put 'downcase-region 'disabled nil)
    (put 'erase-buffer 'disabled nil)
    (put 'scroll-left 'disabled nil)
    (put 'dired-find-alternate-file 'disabled nil)
    )

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

  ;; Get rid of the background on column views
  (set-face-attribute 'org-column nil :background nil)
  (set-face-attribute 'org-column-title nil :background nil)
#+end_src

** auto tangle
#+begin_src emacs-lisp
  (defun efs/org-babel-tangle-config()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/dotfiles/arch_acer.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

* System configuration
** bash
#+begin_src conf :tangle ~/.bashrc
  export EDITOR=VISUAL
  export VISUAL="emacs"

  function parse_git_dirty {
      STATUS="$(git status 2> /dev/null)"
      if [[ $? -ne 0 ]]; then printf ""; return; else printf " ["; fi
      if echo ${STATUS} | grep -c "renamed:"         &> /dev/null; then printf " >"; else printf ""; fi
      if echo ${STATUS} | grep -c "brach is ahead:"         &> /dev/null; then printf " !"; else printf ""; fi
      if echo ${STATUS} | grep -c "new file:"         &> /dev/null; then printf " +"; else printf ""; fi
      if echo ${STATUS} | grep -c "Untracked fiels:"         &> /dev/null; then printf " ?"; else printf ""; fi
      if echo ${STATUS} | grep -c "modified:"         &> /dev/null; then printf " *"; else printf ""; fi
      if echo ${STATUS} | grep -c "deleted:"         &> /dev/null; then printf " -"; else printf ""; fi
      printf " ]"
  }

  parse_git_brach() {
      git rev-parse --abbrev-ref HEAD 2> /dev/null
  }

  PS1="\$(parse_git_brach)\$(parse_git_dirty) \w > "

  #update
  alias update='sudo pacman -Syu'
  alias aur='sudo pacman -Sau'

  # Alias
  alias ls='ls -CF --color=auto'
  alias la='ls -A'
  alias ll='ls -alF'
  alias suspend='sudo systemctl suspend'
  alias gs='git status'
  alias grep='grep --color=auto'
  alias rm='rm -i'
  alias mv='mv -i'
  alias tmux='tmux -u'
  # alias ll='ls -lah'
  # alias la='ls -a'
  alias gpgl='gpg --list-secret-keys --keyid-format LONG'
  alias cl='sudo pacman -Rns $(pacman -Qdtq)'
  alias cpu='sudo auto-cpufreq --stats'
  alias te='tar -xvzf'
  alias install_grub='sudo grub-install --target=x86_64-efi --efi-directory=uefi --bootloader-id=grub'
  alias vim='nvim'

  co() {
  gcc "$1" -o ../Debug/"$2"
  }

  dlweb() {
  wget --recursive --no-clobber --page-requisites --html-extension --convert-links --domains "$1" --no-parent "$2"	 
  }
#+end_src

** bash_profile
#+begin_src conf :tangle ~/.bash_profile
  #
  # ~/.bash_profile
  #

  [[ -f ~/.bashrc ]] && . ~/.bashrc

  PATH=$PATH:~/.local/bin

  # Text color variables
  txtund=$(tput sgr 0 1)          # Underline
  txtbld=$(tput bold)             # Bold
  bldred=${txtbld}$(tput setaf 1) #  red
  bldblu=${txtbld}$(tput setaf 4) #  blue
  bldwht=${txtbld}$(tput setaf 7) #  white
  txtrst=$(tput sgr0)             # Reset
  info=${bldwht}*${txtrst}        # Feedback
  pass=${bldblu}*${txtrst}
  warn=${bldred}*${txtrst}
  ques=${bldblu}?${txtrst}

  # opam configuration
  test -r /home/tendou/.opam/opam-init/init.sh && . /home/tendou/.opam/opam-init/init.sh > /dev/null 2> /dev/null || true

  eval $(opam env)
#+end_src
