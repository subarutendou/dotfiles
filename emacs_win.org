#+title Emacs settings
#+PROPERTY: header-args:emacs-lisp :tangle C:/Users/tendou/AppData/Roaming/.emacs.d/init.el :mkdirp yes

* Pre-load
** Minimum UI
#+begin_src emacs-lisp :tangle C:/Users/tendou/AppData/Roaming/.emacs.d/early-init.el
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (set-fringe-mode 10)
  (setq visible-bell t)
  (setq use-dialog-box nil)
  (setq initial-scratch-message nil)
  (show-paren-mode 1)              ; Highlight parenthesis
  (setq-default x-select-enable-primary t) ; use primary as clipboard in emacs
  ;; avoid leaving a gap between the frame and the screen
  (setq-default frame-resize-pixelwise t)
#+end_src

** Basic
#+begin_src emacs-lisp :tangle C:/Users/tendou/AppData/Roaming/.emacs.d/early-init.el
  (add-hook 'emacs-startup-hook 'toggle-frame-maximized)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (fset 'yes-or-no-p 'y-or-n-p)
  (add-hook 'dired-mode-hook (lambda () (dired-omit-mode)))
  (setq native-comp-async-report-warnings-errors nil)
  (column-number-mode 1)
  (when (version<= "26.0.50" emacs-version )
    (global-display-line-numbers-mode))
  (defvar file-name-handler-alist-old file-name-handler-alist)

  (setq file-name-handler-alist nil
        gc-cons-threshold most-positive-fixnum)
  ;; Lower threshold to speed up garbage collection
  (add-hook 'after-init-hook
            `(lambda ()
               (setq file-name-handler-alist file-name-handler-alist-old)
               (setq gc-cons-threshold (* 2 1000 1000)))
            t)

  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  vterm-mode-hook
                  pdf-view-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (set-face-attribute 'default nil :family "MonoLisa" :height 137)
  ;; (set-face-attribute 'default nil :family "IBM Plex Mono" :height 137)
  ;; (set-face-attribute 'default nil :family "Comic Code ligatures" :height 140)
  ;; (set-face-attribute 'default nil :family "Victor Mono" :height 140)
  ;; (set-face-font 'italic "Victor Mono")
  ;; (set-face-font 'bold-italic "Victor Mono")
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
  (setq ido-use-filename-at-point 'guess)
  (when (fboundp 'electric-pair-mode)
    (electric-pair-mode t))
#+end_src

** Backup
#+begin_src emacs-lisp :tangle C:/Users/tendou/AppData/Roaming/.emacs.d/early-init.el
  (setq vc-make-backup-files t)

  (setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
   '(("." . ".saves"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups
#+end_src

* Basic
** Prerequest for package manager
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
  (use-package quelpa-use-package)
#+end_src

** Basic config that need to load after emacs launch
#+begin_src emacs-lisp
  (blink-cursor-mode 0)
  (setq-default tab-width 4)
  (progn
    (setq-default indent-tabs-mode nil))
  (setq xah-fly-use-meta-key nil)
#+end_src

** Theme
#+begin_src emacs-lisp
  ;; (use-package nord-theme
  ;;   :config
  ;;   (load-theme 'nord t))

  (use-package monokai-theme
    :config
    (load-theme 'monokai t))
#+end_src

** Package
*** Intergrate
#+begin_src emacs-lisp
  (use-package tree-sitter
    :diminish tree-sitter-mode
    :config
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
  (use-package tree-sitter-langs)
  (use-package diminish)
  (use-package flx)
  (use-package lua-mode)
  (use-package python-mode)
  (use-package rust-mode)
  (use-package zig-mode)
  (use-package csharp-mode)
  (use-package yaml-mode)
  (use-package ca65-mode)
  (use-package json-mode)
  (use-package magit)

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
  (use-package ligature
    :load-path "~/.emacs.d/github/"
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                         ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                         "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                         "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                         "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                         "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                         "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                         "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                         ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                         "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                         "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                         "?=" "?." "??" ";;" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                         "\\\\" "://"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))

  (use-package xah-fly-keys
    :diminish xah-fly-keys
    :config
    (xah-fly-keys-set-layout "dvorak")
    (define-key xah-fly-command-map (kbd "a") 'counsel-M-x)
    (define-key xah-fly-leader-key-map (kbd "c .") 'counsel-find-file)
    (define-key xah-fly-leader-key-map (kbd "h h") 'counsel-describe-function)
    (define-key xah-fly-leader-key-map (kbd "h n") 'counsel-describe-variable)
    (define-key xah-fly-leader-key-map (kbd "h g") 'counsel-info-lookup-symbol)
    (define-key key-translation-map (kbd "<escape>") (kbd "C-g"))
    (define-key key-translation-map (kbd "<apps>") (kbd "<menu>"))
    (xah-fly-keys 1))
#+end_src

*** ivy
#+begin_src emacs-lisp
  (use-package counsel)
  (use-package ivy
    :diminish ivy-mode
    :init
    (ivy-mode 1)
    :config
    (setq ivy-use-selectable-prompt t))

  (setq ivy-re-builders-alist
        '((ivy-switch-buffer . ivy--regex-plus)
          (t . ivy--regex-fuzzy)))
  (setq ivy-initial-inputs-alist nil)

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  (setq ivy-use-virtual-buffers t)

  (setq enable-recursive-minibuffers t)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)

  (use-package which-key
    :diminish which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src

** App
#+begin_src emacs-lisp
  (use-package ement
    :quelpa (ement :fetcher github :repo "alphapapa/ement.el"))
#+end_src

** Org settings
#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-agenda-start-with-log-mode t)
    (org-log-done 'time)
    (Org-log-into-drawer t))

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1))))

  ;; Make sure org-indent face is available
  (require 'org-indent)
  (require 'org-tempo)
  (setq org-structure-template-alist
        '(("py" . "python")
          ("el" . "src emacs-lisp")
          ("rs" . "rust")
          ("a" . "export ascii\n")
          ("c" . "center\n")
          ("C" . "comment\n")
          ("e" . "example\n")
          ("E" . "export")
          ("h" . "export html\n")
          ("l" . "export latex\n")
          ("q" . "quote\n")
          ("s" . "src")
          ("v" . "verse\n")))
  (progn
    ;; no need to warn
    (put 'narrow-to-region 'disabled nil)
    (put 'narrow-to-page 'disabled nil)
    (put 'upcase-region 'disabled nil)
    (put 'downcase-region 'disabled nil)
    (put 'erase-buffer 'disabled nil)
    (put 'scroll-left 'disabled nil)
    (put 'dired-find-alternate-file 'disabled nil)
    )

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

  ;; Get rid of the background on column views
  (set-face-attribute 'org-column nil :background nil)
  (set-face-attribute 'org-column-title nil :background nil)
#+end_src
