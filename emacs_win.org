#+title Emacs settings
#+PROPERTY: header-args:emacs-lisp :tangle C:/Users/subaru/AppData/Roaming/.emacs.d/init.el :mkdirp yes

* Basic Settings
** Early Settings
   #+begin_src emacs-lisp :tangle C:/Users/subaru/AppData/Roaming/.emacs.d/early-init.el
     (add-hook 'emacs-startup-hook 'toggle-frame-maximized)
     (set-language-environment "UTF-8")
     (set-default-coding-systems 'utf-8)
     (setq inhibit-startup-message t)
     (scroll-bar-mode -1)
     (tool-bar-mode -1)
     (tooltip-mode -1)
     (menu-bar-mode -1)
     (set-fringe-mode 10)
     (fset 'yes-or-no-p 'y-or-n-p)
     (setq visible-bell t)
     (setq use-dialog-box nil)
     (setq native-comp-async-report-warnings-errors nil)
     (column-number-mode 1)
     (when (version<= "26.0.50" emacs-version )
       (global-display-line-numbers-mode))
     (setq backup-directory-alist '(("." . "~/.emacs.d/backup")))

     (dolist (mode '(org-mode-hook
                     term-mode-hook
                     shell-mode-hook
                     eshell-mode-hook
                     vterm-mode-hook
                     pdf-view-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 0))))

     (set-face-attribute 'default nil :family "Comic Code Ligatures" :height 137)

     (setq ido-enable-flex-matching t)
     (setq ido-everywhere t)
     (ido-mode 1)
     (setq ido-use-filename-at-point 'guess)
   #+end_src
** Prerequest for package manager
   #+begin_src emacs-lisp
     (require 'package)
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

     (package-initialize)

     (unless package-archive-contents
       (package-refresh-contents))

     (unless (package-installed-p 'use-package)
       (package-install 'use-package))
     (require 'use-package)
     (setq use-package-always-ensure t)
   #+end_src
** Theme
   #+begin_src emacs-lisp
     (use-package gruvbox-theme
       :config
       (load-theme 'gruvbox-dark-medium t))
   #+end_src
** Package
*** Intergrate
    #+begin_src emacs-lisp
      (blink-cursor-mode 0)

      (use-package xah-fly-keys
        :diminish xah-fly-keys
        :config
        (xah-fly-keys-set-layout "colemak-mod-dh-new")
        (xah-fly-keys 1))

      (use-package diminish)
      (use-package flx)
      (use-package python-mode)
      (use-package rust-mode)
      (use-package csharp-mode)
      (use-package ca65-mode)
      (use-package magit)
      (use-package vertico
        :init
        (vertico-mode))

      (use-package rainbow-delimiters
        :hook (prog-mode . rainbow-delimiters-mode))

      (use-package which-key
        :diminish which-key
        :defer 0
        :diminish which-key-mode
        :config
        (which-key-mode)
        (setq which-key-idle-delay 1))

      (defun crm-indicator (arg)
        (cons (concat "[CRM] " (car args)) (cdr args)))
      (advice-add #'comleting-read-multiple :filter-args #'crm-indicator)

      (setq minibuffer-prompt-properties
            '(read-only t cursor-intangible t face minibuffer-prompt))
      (add-hook 'monobuffer-setup-hook #'cursor-intangible-mode)

      (setq enable-recursive-minibuffers t)

      (use-package ligature
        :load-path "~/.emacs.d/lisp/"
        :config
        ;; Enable the "www" ligature in every possible major mode
        (ligature-set-ligatures 't '("www"))
        ;; Enable traditional ligature support in eww-mode, if the
        ;; `variable-pitch' face supports it
        (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
        ;; Enable all Cascadia Code ligatures in programming modes
        (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                             ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                             "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                             "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                             "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                             "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                             "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                             "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                             ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                             "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                             "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                             "?=" "?." "??" ";;" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                             "\\\\" "://"))
        ;; Enables ligature checks globally in all buffers. You can also do it
        ;; per mode with `ligature-mode'.
        (global-ligature-mode t))
    #+end_src
** Keybind
      #+begin_src emacs-lisp
        (setq-default tab-width 4)
        (progn
          (setq-default indent-tabs-mode nil))
        (setq xah-fly-use-meta-key nil)
        (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
   #+end_src
** Org settings
*** basic
    #+begin_src emacs-lisp
      (use-package org
        :custom
        (org-agenda-start-with-log-mode t)
        (org-log-done 'time)
        (Org-log-into-drawer t))
      ;; (org-agenda-files
      ;;  '("~/orgfile/Tasks.org")		; example
      ;;  '("~/orgfile/birthday.org")))

      (use-package org-bullets
        :hook (org-mode . org-bullets-mode)
        :custom
        (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

      ;; Replace list hyphen with dot
      (font-lock-add-keywords 'org-mode
                              '(("^ *\\([-]\\) "
                                 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

      (dolist (face '((org-level-1 . 1.2)
                      (org-level-2 . 1.1)
                      (org-level-3 . 1.05)
                      (org-level-4 . 1.0)
                      (org-level-5 . 1.1)
                      (org-level-6 . 1.1)
                      (org-level-7 . 1.1)
                      (org-level-8 . 1.1))))

      ;; Make sure org-indent face is available
      (require 'org-indent)
      (require 'org-tempo)
      (setq org-structure-template-alist
            '(("py" . "python")
              ("el" . "src emacs-lisp")
              ("rs" . "rust")
              ("a" . "export ascii\n")
              ("c" . "center\n")
              ("C" . "comment\n")
              ("e" . "example\n")
              ("E" . "export")
              ("h" . "export html\n")
              ("l" . "export latex\n")
              ("q" . "quote\n")
              ("s" . "src")
              ("v" . "verse\n")))
      (progn
        ;; no need to warn
        (put 'narrow-to-region 'disabled nil)
        (put 'narrow-to-page 'disabled nil)
        (put 'upcase-region 'disabled nil)
        (put 'downcase-region 'disabled nil)
        (put 'erase-buffer 'disabled nil)
        (put 'scroll-left 'disabled nil)
        (put 'dired-find-alternate-file 'disabled nil)
        )

      ;; Ensure that anything that should be fixed-pitch in Org files appears that way
      (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
      (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

      ;; Get rid of the background on column views
      (set-face-attribute 'org-column nil :background nil)
      (set-face-attribute 'org-column-title nil :background nil)
    #+end_src
* Keep .emacs.d Clean
  #+begin_src emacs-lisp
    ;; Change the user-emacs-directory to keep unwanted thing out of ~/.emacs.d
    (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
          url-history-file (expand-file-name "url/history" user-emacs-directory))

    ;; Use no-littering to automatically set common path to the new user-emacs-directory
    (use-package no-littering)

    ;; Keep customization settings in a temperary file
    (setq custom-file
          (if (boundp 'server-socket-dir)
              (expand-file-name "custom.el" server-socket-dir)
            (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  #+end_src
* nvim
   #+begin_src conf :tangle C:/Users/subaru/AppData/Local/nvim/init.vim :mkdirp yes
     syntax enable
     set nohlsearch
     set encoding=utf-8
     set pumheight=10
     set fileencoding=utf-8
     set guicursor=
     set hidden
     set noerrorbells
     set tabstop=4 softtabstop=4
     set shiftwidth=4
     set expandtab
     set smartindent
     set relativenumber
     set number
     set nowrap
     set noswapfile
     set nobackup
     set nowritebackup
     set updatetime=300
     set clipboard+=unnamedplus
     set autochdir
     set undodir=~/.config/nvim/undodir
     set undofile
     set scrolloff=8
     set incsearch
     set colorcolumn=80
     set signcolumn=yes
     set updatetime=50
     set shortmess+=c

     if exists('+termguicolors')
       let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
       let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
       set termguicolors
     endif

     highlight ColorColumn ctermbg=0 guibg=lightgrey

     "Vim-Plug

     call plug#begin('~/.config/nvim/plugged')

     Plug 'nvim-telescope/telescope.nvim'
     Plug 'jremmen/vim-ripgrep'
     Plug 'tpope/vim-fugitive'
     Plug 'vim-utils/vim-man'
     " Plug 'lyuts/vim-rtags'
     Plug 'mbbill/undotree'
     Plug 'Chiel92/vim-autoformat'
     Plug 'jiangmiao/auto-pairs'
     " Plug 'Shougo/deoplete.nvim'
     Plug 'tpope/vim-commentary'
     Plug 'ptzz/lf.vim'
     Plug 'junegunn/fzf.vim'
     Plug 'ThePrimeagen/vim-be-good'
     Plug 'tpope/vim-fugitive'
     Plug 'easymotion/vim-easymotion'
     Plug 'tpope/vim-fugitive'

     " color_schemes
     Plug 'gruvbox-community/gruvbox'
     Plug 'arcticicestudio/nord-vim'

     call plug#end()

     colorscheme nord
     highlight Normal guibg=none

     if executable('rg')
         let g:rg_derive_root = 'true'
     endif

     let g:netrw_browse_split = 2
     let g:netrw_banner = 0
     let g:netrw_winsize = 25
     let g:netrw_liststyle = 3

     let g:deoplete#enable_at_startup = 1

     function! s:check_back_space() abort
         let col = col('.') - 1
         return !col || getline('.')[col - 1]  =~# '\s'
     endfunction

     "Other Setting

     "Status-Line
     set statusline=
     set statusline+=
     set statusline+=\ %M
     set statusline+=\ %y
     set statusline+=\ %r
     set statusline+=\ %F

     set statusline+=%= "Right side setttings"
     set statusline+=\ %c:%l/%L
     set statusline+=\ %p%%
     set statusline+=\ [%n]

     fun! TrimWhitespace()
         let l:save = winsaveview()
         keeppatterns %s/\s\+$//e
         call winrestview(l:save)
     endfun

     autocmd BufWritePre * :call TrimWhitespace()

     "Key Config

     " Disable arrow key and backspace
      noremap  <Up> ""
      noremap! <Up> <Esc>
      noremap  <Down> ""
      noremap! <Down> <Esc>
      noremap  <Left> ""
      noremap! <Left> <Esc>
      noremap  <Right> ""
      noremap! <Right> <Esc>

     :inoremap <BS> <Nop>
     :inoremap <Del> <Nop>

     " Remap splits navigation
     "nnoremap <leader>n :Vexplore<CR>
     nnoremap <leader>h :wincmd h<CR>
     nnoremap <leader>j :wincmd j<CR>
     nnoremap <leader>k :wincmd k<CR>
     nnoremap <leader>l :wincmd l<CR>

     " Make adjusing split sizes a bit more frendly
     nnoremap <M-l> :vertical resize +3<CR>
     nnoremap <M-h> :vertical resize -3<CR>
     nnoremap <M-k> :resize +3<CR>
     nnoremap <M-j> :resize -3<CR>

     " Change 2 split windows from vertical to horizon or horizon to vertical
     map <leader>th <C-w>t<C-w>H
     map <leader>tk <C-w>t<C-w>K

     nnoremap <leader>u :UndotreeShow<CR>
     nnoremap <leader>pv :wincmd v<bar> :Ex <bar> :vertical resize 30<CR>
     nnoremap <Leader>ps :Rg<SPACE>
     nnoremap <silent> <Leader>+ :vertical resize +5<CR>
     nnoremap <silent> <Leader>- :vertical resize -5<CR>
     vnoremap J :m '>+1<CR>gv=gv'
     vnoremap K :m '<-2<CR>gv=gv'

     " inoremap <silent><expr> <TAB>
     "             \ pumvisible() ? "\<C-n>" :
     "             \ <SID>check_back_space() ? "\<TAB>" :
     "             \ coc#refresh()

     map <leader>t :new term://zsh<CR>

     " Cargo
     "nnoremap <leader>c :!cargo clippy

     " autoformat
     noremap <F3> :Autoformat<CR>

     " remap the fucking escape key
     inoremap jj <Esc>

     " Replace all is aliased to S.
     nnoremap S :%s//g<left><left>

     " easymotion
     map <leader><leader>. <Plug>(easymotion-repeat)
     map <leader><leader>f <Plug>(easymotion-overwin-f)
     map <leader><leader>j <Plug>(easymotion-overwin-line)
     map <leader><leader>k <Plug>(easymotion-overwin-line)
     map <leader><leader>w <Plug>(easymotion-overwin-w)

     " save with sudo
     command W :execute ':silent w !sudo tee % > /dev/null' | :edit!
   #+end_src

