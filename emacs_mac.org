#+title Emacs settings
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

* pre-load
** Minimum
#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
  (setq custom-file "~/.emacs.d/.emacs.custom.el")
  (add-to-list 'load-path "~/.emacs.d/.emacs.local/")
  (setq inhibit-startup-message t
    inhibit-startup-echo-area-message t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (set-fringe-mode 10)
  (setq visible-bell t)
  (setq use-dialog-box nil)
  (setq initial-scratch-message nil)
  (save-place-mode 1)
  (show-paren-mode 1)
  (setq-default x-select-enable-primary t)
  (setq-default frame-resize-pixelwise t)
  (add-hook 'emacs-startup-hook 'toggle-frame-maximized)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (setq native-comp-async-report-warnings-errors nil)
  (column-number-mode 1)
  (global-auto-revert-mode 1)
  (add-hook 'dired-mode-hook 'auto-revert-mode)
  (when (version<= "26.0.50" emacs-version )
    (global-display-line-numbers-mode))
  (setq display-line-numbers-type 'relative)
  (defvar file-name-handler-alist-old file-name-handler-alist)
  (setq file-name-handler-alist nil
    gc-cons-threshold most-positive-fixnum)
  (add-hook 'after-init-hook
	(lambda ()
	  (setq file-name-handler-alist file-name-handler-alist-old)
	  (setq gc-cons-threashold (* 2 1000 1000)))
	t)
  (dolist (mode ' (org-mode-hook
	   term-mode-hook
	   shell-mode-hook
	   eshell-mode-hook
	   vterm-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
  (setq browse-url-browser-function 'browse-url-default-windows-browser)
  (when (fboundp 'electric-pair-mode)
    (electric-pair-mode t))
  (add-to-list 'default-frame-alist '(font . "Victor Mono-14"))
  (setq vc-make-backup-files t)
  (setq
   backup-by-copying t
   backup-directory-alist
   '(("." . ".saves"))
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)
#+end_src

* basic
** use-package
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** package
*** melpa emacs
#+begin_src emacs-lisp
  (use-package ido
    :config
    (ido-mode 1)
    (setq ido-everywhere t))

  (use-package ido-completing-read+
    :config
    (ido-ubiquitous-mode 1))

  (use-package amx
    :config
    (amx-mode)
    ;; This is your old M-x.
    (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command))

  (use-package diminish)
  (use-package flx)
  (use-package swift-mode)
  (use-package lua-mode)
  (use-package python-mode)
  (use-package rust-mode)
  (use-package json-mode)
  (use-package yaml-mode)
  (use-package auto-complete
               :diminish auto-complete-mode
               :config
               (ac-config-default))
  (use-package undo-tree)
  (use-package undo-fu)
  (use-package evil
    :demand t
    :bind (("<escape>" . keyboard-escape-quit))
    :init
    ;; allows for using cgn
    ;; (setq evil-search-module 'evil-search)
    (setq evil-want-keybinding nil)
    ;; no vim insert bindings
    (setq evil-undo-system 'undo-fu)
    :config
    (evil-mode 1))

  (require 'simpc-mode)
  (add-to-list 'auto-mode-alist '("\\.[hc]\\(pp\\)?\\'" . simpc-mode))
  (require 'c3-mode)

  (use-package rainbow-delimiters
               :hook (prog-mode . rainbow-delimiters-mode))

  (use-package which-key
    :config
    (which-key-mode)
    (which-key-setup-minibuffer))

  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src

** settings
#+begin_src emacs-lisp
  (blink-cursor-mode 0)
  (require 'recentf)
  (recentf-mode t)
  (setq recentf-max-saved-items 50)
  (setq-default indent-tabs-mode nil)
  (setq-default c-basic-offset 4)

  (use-package savehist
      :config
      (setq history-length 25)
      (savehist-mode 1)
      (setq savehist-save-minibuffer-history t)
      (add-hook 'after-init-hook #'savehist-mode))

  (load-file custom-file)
#+end_src

* emacs.local
** simpc-mode
#+begin_src emacs-lisp :tangle ~/.emacs.d/.emacs.local/simpc-mode.el :mkdirp yes
  (require 'subr-x)

  (defvar simpc-mode-syntax-table
    (let ((table (make-syntax-table)))
      ;; C/C++ style comments
          (modify-syntax-entry ?/ ". 124b" table)
          (modify-syntax-entry ?* ". 23" table)
          (modify-syntax-entry ?\n "> b" table)
      ;; Preprocessor stuff?
      (modify-syntax-entry ?# "." table)
      ;; Chars are the same as strings
      (modify-syntax-entry ?' "\"" table)
      ;; Treat <> as punctuation (needed to highlight C++ keywords
      ;; properly in template syntax)
      (modify-syntax-entry ?< "." table)
      (modify-syntax-entry ?> "." table)

      (modify-syntax-entry ?& "." table)
      (modify-syntax-entry ?% "." table)
      table))

  (defun simpc-types ()
    '("char" "int" "long" "short" "void" "bool" "float" "double" "signed" "unsigned"
      "char16_t" "char32_t" "char8_t"
      "int8_t" "uint8_t" "int16_t" "uint16_t" "int32_t" "uint32_t" "int64_t" "uint64_t"
      "uintptr_t"
      "size_t"))

  (defun simpc-keywords ()
    '("auto" "break" "case" "const" "continue" "default" "do"
      "else" "enum" "extern" "for" "goto" "if" "register"
      "return"  "sizeof" "static" "struct" "switch" "typedef"
      "union"  "volatile" "while" "alignas" "alignof" "and"
      "and_eq" "asm" "atomic_cancel" "atomic_commit" "atomic_noexcept" "bitand"
      "bitor" "catch"  "class" "co_await"
      "co_return" "co_yield" "compl" "concept" "const_cast" "consteval" "constexpr"
      "constinit" "decltype" "delete" "dynamic_cast" "explicit" "export" "false" 
      "friend" "inline" "mutable" "namespace" "new" "noexcept" "not" "not_eq"
      "nullptr" "operator" "or" "or_eq" "private" "protected" "public" "reflexpr"
      "reinterpret_cast" "requires" "static_assert" "static_cast" "synchronized"
      "template" "this" "thread_local" "throw" "true" "try" "typeid" "typename"
      "using" "virtual" "wchar_t" "xor" "xor_eq"))

  (defun simpc-font-lock-keywords ()
    (list
     `("# *[#a-zA-Z0-9_]+" . font-lock-preprocessor-face)
     `("#.*include \\(\\(<\\|\"\\).*\\(>\\|\"\\)\\)" . (1 font-lock-string-face))
     `(,(regexp-opt (simpc-keywords) 'symbols) . font-lock-keyword-face)
     `(,(regexp-opt (simpc-types) 'symbols) . font-lock-type-face)))

  (defun simpc--previous-non-empty-line ()
    (save-excursion
      (forward-line -1)
      (while (and (not (bobp))
                  (string-empty-p
                   (string-trim-right
                    (thing-at-point 'line t))))
        (forward-line -1))
      (thing-at-point 'line t)))

  (defun simpc--indentation-of-previous-non-empty-line ()
    (save-excursion
      (forward-line -1)
      (while (and (not (bobp))
                  (string-empty-p
                   (string-trim-right
                    (thing-at-point 'line t))))
        (forward-line -1))
      (current-indentation)))

  (defun simpc--desired-indentation ()
    (let* ((cur-line (string-trim-right (thing-at-point 'line t)))
           (prev-line (string-trim-right (simpc--previous-non-empty-line)))
           (indent-len 4)
           (prev-indent (simpc--indentation-of-previous-non-empty-line)))
      (cond
       ((string-match-p "^\\s-*switch\\s-*(.+)" prev-line)
        prev-indent)
       ((and (string-suffix-p "{" prev-line)
             (string-prefix-p "}" (string-trim-left cur-line)))
        prev-indent)
       ((string-suffix-p "{" prev-line)
        (+ prev-indent indent-len))
       ((string-prefix-p "}" (string-trim-left cur-line))
        (max (- prev-indent indent-len) 0))
       ((string-suffix-p ":" prev-line)
        (if (string-suffix-p ":" cur-line)
            prev-indent
          (+ prev-indent indent-len)))
       ((string-suffix-p ":" cur-line)
        (max (- prev-indent indent-len) 0))
       (t prev-indent))))

  ;;; TODO: customizable indentation (amount of spaces, tabs, etc)
  (defun simpc-indent-line ()
    (interactive)
    (when (not (bobp))
      (let* ((desired-indentation
              (simpc--desired-indentation))
             (n (max (- (current-column) (current-indentation)) 0)))
        (indent-line-to desired-indentation)
        (forward-char n))))

  (define-derived-mode simpc-mode prog-mode "Simple C"
    "Simple major mode for editing C files."
    :syntax-table simpc-mode-syntax-table
    (setq-local font-lock-defaults '(simpc-font-lock-keywords))
    (setq-local indent-line-function 'simpc-indent-line)
    (setq-local comment-start "// "))

  (provide 'simpc-mode)
#+end_src

** c3-mode
#+begin_src emacs-lisp :tangle ~/.emacs.d/.emacs.local/c3-mode.el :mkdirp yes
  (require 'subr-x)

  (defvar c3-mode-syntax-table
    (let ((table (make-syntax-table)))
      ;; C/C++ style comments
      (modify-syntax-entry ?/ ". 124b" table)
      (modify-syntax-entry ?* ". 23" table)
      (modify-syntax-entry ?\n "> b" table)
      ;; Chars are the same as strings
      (modify-syntax-entry ?' "\"" table)
      ;; Treat <> as punctuation (needed to highlight C++ keywords
      ;; properly in template syntax)
      (modify-syntax-entry ?< "." table)
      (modify-syntax-entry ?> "." table)
      (modify-syntax-entry ?& "." table)
      (modify-syntax-entry ?% "." table)
      table))

  (defun c3-types ()
    '("void" "bool"
      "ichar" "char"
      ;; Integer types
      "short" "ushort" "int" "uint" "long" "ulong" "int128" "uint128"
      "iptr" "uptr"
      "isz" "usz"
      ;; Floating point types
      "float16" "float" "double" "float128"
      ;; Other types
      "any" "anyfault" "typeid"        
      ;; C compatibility types
      "CChar" "CShort" "CUShort" "CInt" "CUInt" "CLong" "CULong" "CLongLong" "CULongLong" "CFloat" "CDouble" "CLongDouble"
      ;; CT types
      "$typefrom" "$tyypeof" "$vatype"       
      ))

  (defun c3-keywords ()
    '("asm"         "assert"      "bitstruct"   
      "break"       "case"        "catch"
      "const"       "continue"    "def"
      "default"     "defer"       "distinct"
      "do"          "else"        "enum"        
      "extern"      "false"       "fault"
      "for"         "foreach"     "foreach_r"
      "fn"          "tlocal"      "if"
      "inline"      "import"      "macro"
      "module"      "nextcase"    "null"
      "return"      "static"      "struct"
      "switch"      "true"        "try"
      "union"       "var"         "while"
      "$alignof"    "$assert"     "$case"
      "$checks"     "$default"    "$defined"
      "$echo"       "$else"       "$endfor"
      "$endforeach" "$endif"      "$endswitch"
      "$for"        "$foreach"    "$if"
      "$include"    "$nameof"     "$offsetof"
      "$qnameof"    "$sizeof"     "$stringify"
      "$vacount"    "$vaconst"    "$varef"
      "$vaarg"      "$vaexpr"     "$vasplat" 
  ))

  (defun c3-font-lock-keywords ()
    (list
     `("#.*include \\(\\(<\\|\"\\).*\\(>\\|\"\\)\\)" . (1 font-lock-string-face))
     `(,(regexp-opt (c3-keywords) 'symbols) . font-lock-keyword-face)
     `(,(regexp-opt (c3-types) 'symbols) . font-lock-type-face)))

  (defun c3--space-prefix-len (line)
    (- (length line)
       (length (string-trim-left line))))

  (defun c3--previous-non-empty-line ()
    (save-excursion
      (forward-line -1)
      (while (and (not (bobp))
                  (string-empty-p
                   (string-trim-right
                    (thing-at-point 'line t))))
        (forward-line -1))
      (thing-at-point 'line t)))

  (defun c3--desired-indentation ()
    (let ((cur-line (string-trim-right (thing-at-point 'line t)))
          (prev-line (string-trim-right (c3--previous-non-empty-line)))
          (indent-len 4))
      (cond
       ((and (string-suffix-p "{" prev-line)
             (string-prefix-p "}" (string-trim-left cur-line)))
        (c3--space-prefix-len prev-line))
       ((string-suffix-p "{" prev-line)
        (+ (c3--space-prefix-len prev-line) indent-len))
       ((string-prefix-p "}" (string-trim-left cur-line))
        (max (- (c3--space-prefix-len prev-line) indent-len) 0))
       (t (c3--space-prefix-len prev-line)))))

  (defun c3-indent-line ()
    (interactive)
    (when (not (bobp))
      (let* ((current-indentation
              (c3--space-prefix-len (thing-at-point 'line t)))
             (desired-indentation
              (c3--desired-indentation))
             (n (max (- (current-column) current-indentation) 0)))
        (indent-line-to desired-indentation)
        (forward-char n))))

  ;;;###autoload
  (define-derived-mode c3-mode prog-mode "Simple C3"
    "Simple major mode for C3."
    :syntax-table c3-mode-syntax-table
    (setq-local font-lock-defaults '(c3-font-lock-keywords))
    (setq-local indent-line-function 'c3-indent-line)
    (setq-local comment-start "// "))

  ;;;###autoload
  (add-to-list 'auto-mode-alist '("\\.c3\\'" . c3-mode))
  (add-to-list 'auto-mode-alist '("\\.c3i\\'" . c3-mode))

  (provide 'c3-mode)
#+end_src
* system configuration
** bash
#+begin_src conf :tangle ~/.bashrc
  export EDITOR=VISUAL
  export VISUAL="emacs"
  export GTK_THEME=Adwaita:dark
  export GTK2_RC_FILES=/usr/share/themes/Adwaita-dark/gtk-2.0/gtkrc
  export QT_STYLE_OVERRIDE=adwaita-dark
  export PATH=~/dow/swift-5.9.2-RELEASE-ubuntu18.04/usr/bin:"${PATH}"

  function parse_git_dirty {
      STATUS="$(git status 2> /dev/null)"
      if [[ $? -ne 0 ]]; then printf ""; return; else printf " ["; fi
      if echo ${STATUS} | grep -c "renamed:"         &> /dev/null; then printf " >"; else printf ""; fi
      if echo ${STATUS} | grep -c "brach is ahead:"         &> /dev/null; then printf " !"; else printf ""; fi
      if echo ${STATUS} | grep -c "new file:"         &> /dev/null; then printf " +"; else printf ""; fi
      if echo ${STATUS} | grep -c "Untracked fiels:"         &> /dev/null; then printf " ?"; else printf ""; fi
      if echo ${STATUS} | grep -c "modified:"         &> /dev/null; then printf " *"; else printf ""; fi
      if echo ${STATUS} | grep -c "deleted:"         &> /dev/null; then printf " -"; else printf ""; fi
      printf " ]"
  }

  parse_git_brach() {
      git rev-parse --abbrev-ref HEAD 2> /dev/null
  }

  PS1="\$(parse_git_brach)\$(parse_git_dirty) \w/\n > "

  #update
  alias update='sudo pacman -Syu'
  alias aur='sudo pacman -Sau'

  # Alias
  alias ls='ls -CF --color=auto'
  alias la='ls -A'
  alias ll='ls -alF'
  alias suspend='sudo systemctl suspend'
  alias gs='git status'
  alias grep='grep --color=auto'
  alias rm='rm -i'
  alias mv='mv -i'
  alias tmux='tmux -u'
  # alias ll='ls -lah'
  # alias la='ls -a'
  alias gpgl='gpg --list-secret-keys --keyid-format LONG'
  alias cl='sudo pacman -Rns $(pacman -Qdtq)'
  alias cpu='sudo auto-cpufreq --stats'
  alias te='tar -xvzf'
  alias install_grub='sudo grub-install --target=x86_64-efi --efi-directory=uefi --bootloader-id=grub'
  alias vim='nvim'

  co() {
  gcc "$1" -o ../Debug/"$2"
  }

  dlweb() {
  wget --recursive --no-clobber --page-requisites --html-extension --convert-links --domains "$1" --no-parent "$2"	 
  }
#+end_src

** bash_profile
#+begin_src conf :tangle ~/.bash_profile
  #
  # ~/.bash_profile
  #

  [[ -f ~/.bashrc ]] && . ~/.bashrc

  PATH=$PATH:~/.local/bin

  # Text color variables
  txtund=$(tput sgr 0 1)          # Underline
  txtbld=$(tput bold)             # Bold
  bldred=${txtbld}$(tput setaf 1) #  red
  bldblu=${txtbld}$(tput setaf 4) #  blue
  bldwht=${txtbld}$(tput setaf 7) #  white
  txtrst=$(tput sgr0)             # Reset
  info=${bldwht}*${txtrst}        # Feedback
  pass=${bldblu}*${txtrst}
  warn=${bldred}*${txtrst}
  ques=${bldblu}?${txtrst}

  . "$HOME/.cargo/env"
#+end_src
