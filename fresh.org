#+title Emacs setting
#+PROPERTY: header-args:emacs-lisp :tangle C:/Users/tendou/AppData/Roaming/.emacs.d/init.el :mkdirp yes

* pre-load
** Minimum
#+begin_src emacs-lisp :tangle C:/Users/tendou/AppData/Roaming/.emacs.d/early-init.el
  (setq inhibit-startup-message t
	inhibit-startup-echo-area-message t)
  (setq initial-sratch-message nil)
  (when (boundp 'w32-pipe-read-delay)
    (setq w32-pipe-read-delay 0))
  ;; Set the buffer size to 64K on Windows (from the original 4K)
  (when (boundp 'w32-pipe-buffer-size)
    (setq irony-server-w32-pipe-buffer-size (* 64 1024)))
  (save-place-mode 1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (set-fringe-mode 10)
  (setq visible-bell t)
  (setq use-dialog-box nil)
  (show-paren-mode 1)
  (setq-default x-select-enable-primary t)
  (setq-default frame-resize-pixelwise t)
  (add-hook 'emacs-startup-hook 'toggle-frame-maximized)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq native-comp-async-report-warnings-errors nil)
  (column-number-mode 1)
  (when (version<= "26.0.50" emacs-version)
    (global-display-line-numbers-mode))
  (defvar file-name-handler-alist-old file-name-handler-alist)
  (setq file-name-handler-alist nil
	gc-cons-threshold most-positive-fixnum)
  (add-hook 'after-init-hook
	    (lambda ()
	      (setq file-name-handler-alist file-name-handler-alist-old)
	      (setq gc-cons-threashold (* 2 1000 1000)))
	    t)
  (dolist (mode ' (org-mode-hook
		   term-mode-hook
		   shell-mode-hook
		   eshell-mode-hook
		   vterm-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
  (setq browse-url-browser-function 'browse-url-default-windows-browser)
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
  (setq ido-use-filename-at-point 'guess)
  (when (fboundp 'electric-pair-mode)
    (electric-pair-mode t))
  (set-face-attribute 'default nil :family "MonoLisa" :height 137)
  (setq vc-make-backup-files t)
  (setq
   backup-by-copying t
   backup-directory-alist
   '(("." . ".saves"))
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)
#+end_src

* basic
** use-package
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
  (use-package quelpa-use-package)
#+end_src
** package
*** melpa package
#+begin_src emacs-lisp
  (use-package gruvbox-theme
    :config
    (load-theme 'gruvbox t))
  (use-package diminish)
  (use-package flx)
  (use-package lua-mode)
  (use-package python-mode)
  (use-package rust-mode)
  (use-package zig-mode)
  (use-package json-mode)
  (use-package auto-complete
	       :diminish auto-complete-mode
	       :config
	       (ac-config-default))
  (use-package rainbow-delimiters
	       :hook (prog-mode . rainbow-delimiters-mode))
  (use-package counsel)
  (use-package ivy
	       :diminish ivy-mode
	       :init
	       (ivy-mode 1)
	       :config
	       (setq ivy-use-selectable-prompt t))
  (setq ivy-re-builders-alist
	'((ivy-switch-buffer . ivy--regex-plus)
	  (t . ivy--regex-fuzzy)))
  (setq ivy-initial-inputs-alist nil)
  (use-package ivy-rich
	       :init
	       (ivy-rich-mode 1))
  (setq ivy-use-virtual-buffers t)
  (use-package which-key
	       :diminish which-key
	       :defer 0
	       :diminish which-key-mode
	       :config
	       (which-key-mode)
	       (setq which-key-idle-delay 1))
  (use-package magit
	       :custom
	       (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-vl))
  (use-package evil
    :demand t
    :bind (("<escape>" . keyboard-escape-quit))
    :init
    ;; allows for using cgn
    ;; (setq evil-search-module 'evil-search)
    (setq evil-want-keybinding nil)
    ;; no vim insert bindings
    (setq evil-undo-system 'undo-fu)
    :config
    (evil-mode 1))

  ;;; Vim Bindings Everywhere else
  (use-package evil-collection
    :after evil
    :config
    (setq evil-want-integration t)
    (evil-collection-init))
#+end_src
*** manual installed
#+begin_src emacs-lisp
  (use-package ligature
    :load-path "~/.emacs.d/github/ligature.el"
    :config
    (ligature-set-ligatures 'prog-mode '("-->" "->" "->>" "-<" "--<"
					 "-~" "]#" ".-" "!=" "!=="
					 "#(" "#{" "#[" "#_" "#_("
					 "/=" "/==" "|||" "||" ;; "|"
					 "==" "===" "==>" "=>" "=>>"
					 "=<<" "=/" ">-" ">->" ">="
					 ">=>" "<-" "<--" "<->" "<-<"
					 "<!--" "<|" "<||" "<|||"
					 "<|>" "<=" "<==" "<==>" "<=>"
					 "<=<" "<<-" "<<=" "<~" "<~>"
					 "<~~" "~-" "~@" "~=" "~>"
					 "~~" "~~>" ".=" "..=" "---"
					 "{|" "[|" ".."  "..."  "..<"
					 ".?"  "::" ":::" "::=" ":="
					 ":>" ":<" ";;" "!!"  "!!."
					 "!!!"  "?."  "?:" "??"  "?="
					 "**" "***" "*>" "*/" "#:"
					 "#!"  "#?"  "##" "###" "####"
					 "#=" "/*" "/>" "//" "///"
					 "&&" "|}" "|]" "$>" "++"
					 "+++" "+>" "=:=" "=!=" ">:"
					 ">>" ">>>" "<:" "<*" "<*>"
					 "<$" "<$>" "<+" "<+>" "<>"
					 "<<" "<<<" "</" "</>" "^="
					 "%%" "'''" "\"\"\"" ))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src
** settings
#+begin_src emacs-lisp
  (blink-cursor-mode 0)
  (require 'recentf)
  (recentf-mode t)
  (setq recentf-max-saved-items 50)

  (require 'savehist)
  (setq savehist-save-minibuffer-history t)
  (add-hook 'after-init-hook #'savehist-mode)
#+end_src
